{
  "html": "<h1 id=\"h-1-1\">Java SDK文档</h1><p>本文档主要介绍OCR Java SDK的安装和使用。在使用本文档前，您需要先了解Optical Character Recognition(OCR)的基础知识，并已经开通了OCR服务。</p><h1 id=\"h-1-2\">安装OCR Java SDK</h1><p><strong>OCR Java SDK目录结构</strong></p><pre>\n<code class=\"hljs\" lang=\"\">com<span class=\"hljs-selector-class\">.baidu</span><span class=\"hljs-selector-class\">.aip</span>\n       ├── auth                                <span class=\"hljs-comment\">//签名相关类</span>\n       ├── http                                <span class=\"hljs-comment\">//Http通信相关类</span>\n       ├── client                              <span class=\"hljs-comment\">//公用类</span>\n       ├── exception                           <span class=\"hljs-comment\">//exception类</span>\n       ├── ocr\n       │       └── AipOcr                      <span class=\"hljs-comment\">//AipOcr类</span>\n       └── util                                <span class=\"hljs-comment\">//工具类</span></code>\n</pre><p><strong>支持 JAVA版本：1.7+</strong></p><p><strong>直接使用JAR包步骤如下：</strong></p><p>1.在<a href=\"http://ai.baidu.com/sdk\" target=\"_blank\">官方网站</a>下载Java SDK压缩工具包。</p><p>2.将下载的<pre>\n<code class=\"hljs\" lang=\"\">aip-java-sdk-<span class=\"hljs-keyword\">version</span>.<span class=\"hljs-keyword\">zip</span></code>\n</pre>解压后，复制到工程文件夹中。</p><p>3.在Eclipse右键“工程 -&gt; Properties -&gt; Java Build Path -&gt; Add JARs”。</p><p>4.添加SDK工具包<pre>\n<code class=\"hljs\" lang=\"\">ocr_sdk-<span class=\"hljs-built_in\">version</span>.jar</code>\n</pre>和第三方依赖工具包<pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">third</span>-party/*.jar</code>\n</pre>。</p><p>其中，<pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-built_in\">version</span></code>\n</pre>为版本号，添加完成后，用户就可以在工程中使用OCR Java SDK。</p><h1 id=\"h-1-3\">快速入门</h1><p>AipOcrClient是与Optical Character Recognition(OCR)交互的客户端，所有OCR操作都是通过AipOcrClient完成的。您可以参考<strong>新建AipOcrClient</strong>，完成初始化客户端的操作。</p><h2 id=\"h-2-1\">新建AipOcrClient</h2><p>OcrClient是Optical Character Recognition的Java客户端，为使用Optical Character Recognition的开发人员提供了一系列的交互方法。</p><p>用户可以参考如下代码新建一个OcrClient：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> class Sample {\n    <span class=\"hljs-comment\">//设置APPID/AK/SK</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> APP_ID = <span class=\"hljs-string\">\"你的 App ID\"</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> API_KEY = <span class=\"hljs-string\">\"你的 Api ID\"</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> SECRET_KEY = <span class=\"hljs-string\">\"你的 Secret Key\"</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> main(<span class=\"hljs-keyword\">String</span>[] args) {\n        <span class=\"hljs-comment\">// 初始化一个OcrClient</span>\n        AipOcr client = <span class=\"hljs-keyword\">new</span> AipOcr(APP_ID, API_KEY, SECRET_KEY);\n\n        <span class=\"hljs-comment\">// 可选：设置网络连接参数</span>\n        client.setConnectionTimeoutInMillis(<span class=\"hljs-number\">2000</span>);\n        client.setSocketTimeoutInMillis(<span class=\"hljs-number\">60000</span>);\n\n        <span class=\"hljs-comment\">// 调用身份证识别接口</span>\n        <span class=\"hljs-keyword\">String</span> idFilePath = <span class=\"hljs-string\">\"test.jpg\"</span>;\n        <span class=\"hljs-keyword\">JSONObject</span> idcardRes = client.idcard(idFilePath, <span class=\"hljs-keyword\">true</span>);\n        System.out.<span class=\"hljs-built_in\">println</span>(idcardRes.toString(<span class=\"hljs-number\">2</span>));\n\n        <span class=\"hljs-comment\">// 调用银行卡识别接口</span>\n        <span class=\"hljs-keyword\">String</span> bankFilePath = <span class=\"hljs-string\">\"test_bank.jpg\"</span>;\n        <span class=\"hljs-keyword\">JSONObject</span> bankRes = client.bankcard(bankFilePath);\n        System.out.<span class=\"hljs-built_in\">println</span>(bankRes.toString(<span class=\"hljs-number\">2</span>));\n\n        <span class=\"hljs-comment\">// 调用通用识别接口</span>\n        <span class=\"hljs-keyword\">String</span> genFilePath = <span class=\"hljs-string\">\"test_general.jpg\"</span>;\n        <span class=\"hljs-keyword\">JSONObject</span> genRes = client.general(genFilePath, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;());\n        System.out.<span class=\"hljs-built_in\">println</span>(genRes.toString(<span class=\"hljs-number\">2</span>));\n    }\n}</code>\n</pre><p>在上面代码中，常量<pre>\n<code class=\"hljs\" lang=\"\">APP_ID</code>\n</pre>在百度云控制台中创建，常量<pre>\n<code class=\"hljs\" lang=\"\">API_KEY</code>\n</pre>与<pre>\n<code class=\"hljs\" lang=\"\">SECRET_KEY</code>\n</pre>是在创建完毕应用后，系统分配给用户的，均为字符串，用于标识用户，为访问做签名验证，可在AI服务控制台中的<strong>应用列表</strong>中查看。</p><p><strong>注意：</strong>如您以前是百度云的老用户，其中<pre>\n<code class=\"hljs\" lang=\"\">API_KEY</code>\n</pre>对应百度云的“Access Key ID”，<pre>\n<code class=\"hljs\" lang=\"\">SECRET_KEY</code>\n</pre>对应百度云的“Access Key Secret”。</p><h2 id=\"h-2-2\">配置AipOcrClient</h2><p>如果用户需要配置AipOcrClient的一些细节参数，可以在构造AipOcr之后调用接口设置参数，目前只支持以下参数：</p><table><thead><tr><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>setConnectionTimeoutInMillis</td><td>建立连接的超时时间（单位：毫秒）</td></tr><tr><td>setSocketTimeoutInMillis</td><td>通过打开的连接传输数据的超时时间（单位：毫秒）</td></tr></tbody></table><h1 id=\"h-1-4\">错误信息格式</h1><p>若请求错误，服务器将返回的JSON文本包含以下参数：</p><ul><li><strong>error_code：</strong>错误码；关于错误码的详细信息请参考<strong>通用错误码</strong>和<strong>业务相关错误码</strong>。</li><li><strong>error_msg：</strong>错误描述信息，帮助理解和解决发生的错误。</li></ul><p><strong>SDK本地检测参数返回的错误码</strong>：</p><table><thead><tr><th>error_code</th><th>error_msg</th><th>备注</th></tr></thead><tbody><tr><td>SDK100</td><td>image size error</td><td>图片大小超限</td></tr><tr><td>SDK101</td><td>image length error</td><td>图片边长不符合要求</td></tr><tr><td>SDK102</td><td>read image file error</td><td>读取图片文件错误</td></tr><tr><td>SDK108</td><td>connection or read data time out</td><td>连接超时或读取数据超时</td></tr><tr><td>SDK109</td><td>unsupported image format</td><td>不支持的图片格式</td></tr></tbody></table><p><strong>服务端返回的错误码</strong></p><table><thead><tr><th>错误码</th><th>错误信息</th><th>描述</th></tr></thead><tbody><tr><td>216015</td><td>module closed</td><td>模块关闭</td></tr><tr><td>216100</td><td>invalid param</td><td>非法参数</td></tr><tr><td>216101</td><td>not enough param</td><td>参数数量不够</td></tr><tr><td>216102</td><td>service not support</td><td>业务不支持</td></tr><tr><td>216103</td><td>param too long</td><td>参数太长</td></tr><tr><td>216110</td><td>appid not exist</td><td>APP ID不存在</td></tr><tr><td>216111</td><td>invalid userid</td><td>非法用户ID</td></tr><tr><td>216200</td><td>empty image</td><td>空的图片</td></tr><tr><td>216201</td><td>image format error</td><td>图片格式错误</td></tr><tr><td>216202</td><td>image size error</td><td>图片大小错误</td></tr><tr><td>216300</td><td>db error</td><td>DB错误</td></tr><tr><td>216400</td><td>backend error</td><td>后端系统错误</td></tr><tr><td>216401</td><td>internal error</td><td>内部错误</td></tr><tr><td>216500</td><td>unknown error</td><td>未知错误</td></tr><tr><td>216600</td><td>id number format error</td><td>身份证的ID格式错误</td></tr><tr><td>216601</td><td>id number and name not match</td><td>身份证的ID和名字不匹配</td></tr><tr><td>216630</td><td>recognize error</td><td>识别错误</td></tr><tr><td>216631</td><td>recognize bank card error</td><td>识别银行卡错误</td></tr><tr><td>216632</td><td>ocr</td><td>unknown error</td></tr><tr><td>216633</td><td>recognize idcard error</td><td>识别身份证错误</td></tr><tr><td>216634</td><td>detect error</td><td>检测错误</td></tr><tr><td>216635</td><td>get mask error</td><td>获取mask图片错误</td></tr></tbody></table><h1 id=\"h-1-5\">通用文字识别</h1><p>通用文字识别可以接受任意图片，并识别出图片中的文字以及全部文字串。</p><p>图片接受参数类型：支持本地图片路径字符串，图片文件二进制数组。</p><p>举例，要对一张图片进行文字识别，具体的文字的内容和信息在返回的words_result字段中：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> generalRecognition(AipOcr client) {\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath = <span class=\"hljs-string\">\"general.jpg\"</span>;\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.general(imagePath);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n\n    <span class=\"hljs-comment\">// 参数为本地图片文件二进制数组</span>\n    <span class=\"hljs-built_in\">byte</span>[] file = readImageFile(imagePath);\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.general(file);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p>传入图片时还想增加一些自定义参数配置：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> generalRecognition(AipOcr client) {\n    <span class=\"hljs-comment\">// 自定义参数定义</span>\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;();\n    options.put(<span class=\"hljs-string\">\"detect_direction\"</span>, <span class=\"hljs-string\">\"false\"</span>);\n    options.put(<span class=\"hljs-string\">\"language_type\"</span>, <span class=\"hljs-string\">\"CHN_ENG\"</span>);\n\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath = <span class=\"hljs-string\">\"general.jpg\"</span>;\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.general(imagePath, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n\n    <span class=\"hljs-comment\">// 参数为本地图片文件二进制数组</span>\n    <span class=\"hljs-built_in\">byte</span>[] file = readImageFile(imagePath);\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.general(file, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p><strong>通用文字识别 请求参数详情</strong></p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>可选值范围</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>true</td><td>string</td><td>-</td><td>图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式</td></tr><tr><td>recognize_granularity</td><td>false</td><td>string</td><td>big、small</td><td>是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置</td></tr><tr><td>mask</td><td>false</td><td>string</td><td>-</td><td>表示mask区域的黑白灰度图片，白色代表选中, base64编码</td></tr><tr><td>language_type</td><td>false</td><td>string</td><td>CHN_ENG、ENG、POR、FRE、GER、ITA、SPA、RUS、JAP</td><td>识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语</td></tr><tr><td>detect_direction</td><td>false</td><td>boolean</td><td>true、false</td><td>是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。</td></tr><tr><td>detect_language</td><td>FALSE</td><td>string</td><td>true、false</td><td>是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）</td></tr><tr><td>classify_dimension</td><td>FALSE</td><td>string</td><td>lottery</td><td>分类维度（根据OCR结果进行分类），逗号分隔，当前只支持lottery。<br>lottery：彩票分类，设置detect_direction有助于提升精度</td></tr><tr><td>vertexes_location</td><td>FALSE</td><td>string</td><td>true、false</td><td>是否返回文字外接多边形顶点位置，不支持单字位置。默认为false</td></tr></tbody></table><p><strong>通用文字识别 返回数据参数详情</strong></p><table><thead><tr><th>字段</th><th>必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>direction</td><td>否</td><td>int32</td><td>图像方向，当detect_direction=true时存在。<br>- -1:未定义，<br>- 0:正向，<br>- 1: 逆时针90度，<br>- 2:逆时针180度，<br>- 3:逆时针270度</td></tr><tr><td>log_id</td><td>是</td><td>uint64</td><td>唯一的log id，用于问题定位</td></tr><tr><td>words_result</td><td>是</td><td>array()</td><td>定位和识别结果数组</td></tr><tr><td>words_result_num</td><td>是</td><td>uint32</td><td>识别结果数，表示words_result的元素个数</td></tr><tr><td>+vertexes_location</td><td>否</td><td>array()</td><td>当前为四个顶点: 左上，右上，右下，左下。当vertexes_location=true时存在</td></tr><tr><td>++x</td><td>是</td><td>uint32</td><td>水平坐标（坐标0点为左上角）</td></tr><tr><td>++y</td><td>是</td><td>uint32</td><td>垂直坐标（坐标0点为左上角）</td></tr><tr><td>+location</td><td>是</td><td>array()</td><td>位置数组（坐标0点为左上角）</td></tr><tr><td>++left</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td>++top</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td>++width</td><td>是</td><td>uint32</td><td>表示定位位置的长方形的宽度</td></tr><tr><td>++height</td><td>是</td><td>uint32</td><td>表示定位位置的长方形的高度</td></tr><tr><td>+words</td><td>否</td><td>string</td><td>识别结果字符串</td></tr><tr><td>+chars</td><td>否</td><td>array()</td><td>单字符结果，recognize_granularity=small时存在</td></tr><tr><td>++location</td><td>是</td><td>array()</td><td>位置数组（坐标0点为左上角）</td></tr><tr><td>+++left</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td>+++top</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td>+++width</td><td>是</td><td>uint32</td><td>表示定位定位位置的长方形的宽度</td></tr><tr><td>+++height</td><td>是</td><td>uint32</td><td>表示位置的长方形的高度</td></tr><tr><td>++char</td><td>是</td><td>string</td><td>单字符识别结果</td></tr></tbody></table><h1 id=\"h-1-6\">银行卡识别</h1><p>银行卡文字识别需要接受银行卡正面带数字的清晰图片，能识别出对应的银行卡号。</p><p>图片接受类型支持本地图片路径字符串，图片文件二进制数组。</p><p>举例，要对一张银行卡进行文字识别：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> bankcardRecognition(AipOcr client) {\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath = <span class=\"hljs-string\">\"bankcard.jpg\"</span>;\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.bankcard(imagePath);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n\n    <span class=\"hljs-comment\">// 参数为本地图片文件二进制数组</span>\n    <span class=\"hljs-built_in\">byte</span>[] file = readImageFile(imagePath);\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.bankcard(file);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p><strong>银行卡识别 请求参数详情</strong></p><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th><th style=\"text-align:left\">是否必须</th></tr></thead><tbody><tr><td style=\"text-align:left\">image</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">图像数据，支持本地图像文件路径，图像文件二进制数组，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式</td><td style=\"text-align:left\">是</td></tr></tbody></table><p><strong>银行卡识别 返回数据参数详情</strong></p><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th></tr></thead><tbody><tr><td style=\"text-align:left\">log_id</td><td style=\"text-align:left\">Uint64</td><td style=\"text-align:left\">唯一的log id，用于问题定位</td></tr><tr><td style=\"text-align:left\">result</td><td style=\"text-align:left\">Object</td><td style=\"text-align:left\">定位和识别结果数组</td></tr><tr><td style=\"text-align:left\">+bank_card_number</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">银行卡识别结果</td></tr><tr><td style=\"text-align:left\">+bank_name</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">银行名，不能识别时为空</td></tr><tr><td style=\"text-align:left\">+bank_card_type</td><td style=\"text-align:left\">uint32</td><td style=\"text-align:left\">银行卡类型，0:不能识别; 1: 借记卡; 2: 信用卡</td></tr></tbody></table><h1 id=\"h-1-7\">身份证识别</h1><p>身份证识别一次只能接受身份证正面或反面的清晰图片，能识别出证件上的文字。</p><p>图片接受参数类型：支持本地图片路径字符串，图片文件二进制数组。</p><p>举例，要对一张身份证进行文字识别，可以仅传入图片信息和注明正面/反面： 返回的words_result记录了信息， 正面支持：住址、公民身份号码、出生、姓名、性别、民族， 背面支持：签发日期、失效日期</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> idcardRecognition(AipOcr client) {\n    <span class=\"hljs-comment\">// 设置识别身份证正面参数</span>\n    <span class=\"hljs-built_in\">boolean</span> isFront = <span class=\"hljs-keyword\">true</span>;\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;();\n\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath = <span class=\"hljs-string\">\"idcard.jpg\"</span>;\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.idcard(imagePath, isFront, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n\n    <span class=\"hljs-comment\">// 参数为本地图片文件二进制数组</span>\n    <span class=\"hljs-built_in\">byte</span>[] file = readImageFile(imagePath);\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.idcard(file, isFront, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p>传入图片时还想增加一些自定义参数配置：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> idcardRecognition(AipOcr client) {\n    <span class=\"hljs-comment\">// 设置识别身份证正面参数</span>\n    <span class=\"hljs-built_in\">boolean</span> isFront = <span class=\"hljs-keyword\">true</span>;\n\n    <span class=\"hljs-comment\">// 自定义参数定义</span>\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;();\n    options.put(<span class=\"hljs-string\">\"detect_direction\"</span>, <span class=\"hljs-string\">\"false\"</span>);\n\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath = <span class=\"hljs-string\">\"idcard.jpg\"</span>;\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.idcard(imagePath, side, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n\n    <span class=\"hljs-comment\">// 参数为本地图片文件二进制数组</span>\n    <span class=\"hljs-built_in\">byte</span>[] file = readImageFile(imagePath);\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.idcard(file, side, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p><strong>身份证识别 可选参数详情</strong></p><table><thead><tr><th>参数</th><th>必选</th><th>范围</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>true</td><td></td><td>String</td><td>图像数据，支持本地图像文件路径，图像文件二进制数据，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式</td></tr><tr><td>isFront</td><td>true</td><td>true、false</td><td>Boolean</td><td>true：身份证正面，false：身份证背面</td></tr><tr><td>detect_direction</td><td>false</td><td>true、false</td><td>string</td><td>是否检测图像朝向，默认不检测，即：false。可选值为：true - 检测图像朝向；false - 不检测图像朝向。朝向是指输入图像是正常方向、逆时针旋转90/180/270度</td></tr><tr><td>accuracy</td><td>false</td><td>auto、normal、high</td><td>string</td><td>精准度，精度越高，速度越慢。default：auto</td></tr></tbody></table><p><strong>身份证识别 返回数据参数详情</strong></p><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th></tr></thead><tbody><tr><td style=\"text-align:left\">direction</td><td style=\"text-align:left\">Int32</td><td style=\"text-align:left\">图像方向，当detect_direction=true时存在。-1:未定义，0:正向，1: 逆时针90度， 2:逆时针180度， 3:逆时针270度</td></tr><tr><td style=\"text-align:left\">log_id</td><td style=\"text-align:left\">Uint64</td><td style=\"text-align:left\">唯一的log id，用于问题定位</td></tr><tr><td style=\"text-align:left\">words_result</td><td style=\"text-align:left\">Array</td><td style=\"text-align:left\">定位和识别结果数组，数组元素的key是身份证的主体字段（正面支持：住址、公民身份号码、出生、姓名、性别、民族，背面支持：签发日期、失效日期）。只返回识别出的字段。</td></tr><tr><td style=\"text-align:left\">words_result_num</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">识别结果数，表示words_result的元素个数</td></tr><tr><td style=\"text-align:left\">+location</td><td style=\"text-align:left\">Array</td><td style=\"text-align:left\">位置数组（坐标0点为左上角）</td></tr><tr><td style=\"text-align:left\">++left</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td style=\"text-align:left\">++top</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td style=\"text-align:left\">++width</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形的宽度</td></tr><tr><td style=\"text-align:left\">++height</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形的高度</td></tr><tr><td style=\"text-align:left\">+words</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">识别结果字符串</td></tr></tbody></table><h1 id=\"h-1-8\">版本更新记录</h1><table><thead><tr><th>上线日期</th><th>版本号</th><th>更新内容</th></tr></thead><tbody><tr><td>2017.3.2</td><td>1.2</td><td>上线对图片参数要求限制，增加设置超时接口</td></tr><tr><td>2017.1.20</td><td>1.1</td><td>对部分云用户调用不成功的错误修复</td></tr><tr><td>2017.1.6</td><td>1.0</td><td>初始版本，上线身份证识别、银行卡识别和通用文字识别接口</td></tr></tbody></table>",
  "headings": [
    {
      "level": 1,
      "text": "Java SDK文档",
      "id": "h-1-1"
    },
    {
      "level": 1,
      "text": "安装OCR Java SDK",
      "id": "h-1-2"
    },
    {
      "level": 1,
      "text": "快速入门",
      "id": "h-1-3"
    },
    {
      "level": 2,
      "text": "新建AipOcrClient",
      "id": "h-2-1"
    },
    {
      "level": 2,
      "text": "配置AipOcrClient",
      "id": "h-2-2"
    },
    {
      "level": 1,
      "text": "错误信息格式",
      "id": "h-1-4"
    },
    {
      "level": 1,
      "text": "通用文字识别",
      "id": "h-1-5"
    },
    {
      "level": 1,
      "text": "银行卡识别",
      "id": "h-1-6"
    },
    {
      "level": 1,
      "text": "身份证识别",
      "id": "h-1-7"
    },
    {
      "level": 1,
      "text": "版本更新记录",
      "id": "h-1-8"
    }
  ]
}
