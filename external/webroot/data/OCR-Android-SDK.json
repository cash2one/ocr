{
  "html": "<h1 id=\"6ab648fa\">OCR Android SDK 开发者文档</h1><p>本文档主要介绍OCR Android SDK的安装和使用。在使用本文档前，您需要先了解Optical Character Recognition(OCR)的基础知识，并已经开通了OCR服务。</p><h1 id=\"1ebd2e02\">快速入门</h1><p>支持的系统和硬件版本</p><ul><li>系统：支持 Android 4.0（API Level 15）到Android7.0（API Level 25）系统。需要开发者通过minSdkVersion来保证支持系统的检测。</li><li>CPU架构：armeabi，arm64-v8a，armeabi-v7a</li><li>机型：手机和平板皆可</li><li>硬件要求：要求设备上有相机模块。</li><li>网络：支持WIFI及移动网络，移动网络支持使用NET网关及WAP网关（CMWAP、CTWAP、UNIWAP、3GWAP）。</li></ul><h2 id=\"e7660123\">开发包说明</h2><pre>\n<code class=\"hljs\" lang=\"\">aip-ocr-android-sdk.<span class=\"hljs-keyword\">zip</span>               <span class=\"hljs-comment\">// OCR SDK包，包括文档，demo工程，SDK核心库</span>\n    |-libs                            <span class=\"hljs-comment\">// lib 库,包括各平台的so库及 jar包。</span>\n    |-OCRDemo                         <span class=\"hljs-comment\">// demo工程</span>\n    |-ocr-ui                          <span class=\"hljs-comment\">// ocr UI模块</span>\n    |-百度OCR识别Android接入文档.docx    <span class=\"hljs-comment\">// 使用文档</span></code>\n</pre><p>sdk的包含的UI部分和demo工程以Android Studio方式提供，sdk部分则可以较方便的集成到eclipse工程中。</p><ol><li>在官网下载Android SDK压缩包。</li><li>(必须)将下载包libs目录中的ocr-sdk.jar文件拷贝到工程libs目录中，并加入工程依赖。</li><li>(必须）ocr-sdk依赖了okhttp:3.5.0以上版本<ul><li>gradle中添加 依赖<code><span class=\"hljs-selector-tag\">compile</span> &amp;<span class=\"hljs-selector-id\">#39</span>;<span class=\"hljs-selector-tag\">com</span><span class=\"hljs-selector-class\">.squareup</span><span class=\"hljs-selector-class\">.okhttp3</span><span class=\"hljs-selector-pseudo\">:okhttp</span><span class=\"hljs-selector-pseudo\">:3.5.0</span>&amp;<span class=\"hljs-selector-id\">#39</span>;</code>；或着您可以手动导入工程附带的Okhttp.jar，Okio.jar文件作为依赖</li></ul></li><li>(必须)将libs目录下armeabi，arm64-v8a，armeabi-v7a文件夹按需添加到android studio工程<code>src<span class=\"hljs-regexp\">/main/</span>jniLibs</code>目录中， eclipse用户默认为libs目录。</li><li>(可选)如果需要使用UI模块，请在Android studio中以模块方式导入下载包中的ocr-ui文件夹。</li></ol><h2 id=\"b3e93a0a\">DEMO使用说明</h2><p>Andoird SDK提供了一个可快速运行的demo工程，直接在Android Studio中导入开发包OCRDemo目录即可运行。</p><p><strong>若运行提示&quot;身份验证错误&quot;，请确认在demo工程中填写了正确的Api Key/Secret Key</strong></p><h3>为工程添加必要的权限</h3><p>在工程AndroidManifest.xml文件中添加如下权限：</p><pre>\n<code class=\"hljs\" lang=\"\">&lt;uses-permission android:<span class=\"hljs-built_in\">name</span>=<span class=\"hljs-string\">\"android.permission.INTERNET\"</span> /&gt;\n&lt;uses-permission android:<span class=\"hljs-built_in\">name</span>=<span class=\"hljs-string\">\"android.permission.CAMERA\"</span>/&gt;\n&lt;uses-permission android:<span class=\"hljs-built_in\">name</span>=<span class=\"hljs-string\">\"android.permission.READ_EXTERNAL_STORAGE\"</span>/&gt;\n&lt;uses-permission android:<span class=\"hljs-built_in\">name</span>=<span class=\"hljs-string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</code>\n</pre><p>各个权限的用途说明见下表：</p><table><thead><tr><th>名称</th><th>用途</th></tr></thead><tbody><tr><td>INTERNET</td><td>应用联网，发送请求数据至服务器，获得识别结果。</td></tr><tr><td>CAMERA</td><td>调用相机进行拍照（仅UI部分需要）</td></tr><tr><td>WRITE_EXTERNAL_STORAGE</td><td>图片裁剪临时存储</td></tr><tr><td>READ_EXTERNAL_STORAGE</td><td>图片裁剪临时存储</td></tr></tbody></table><h3>Proguard配置</h3><p>在Proguard配置文件中增加： <code>keep <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">baidu</span>.<span class=\"hljs-title\">ocr</span>.<span class=\"hljs-title\">sdk</span>.**</span>{*;}</code></p><h2 id=\"7bb09719\">身份验证与安全</h2><p>百度AI开放平台使用OAuth2.0授权调用开放API，调用API时必须在URL中带上accesss_token参数。AccessToken可用AK/SK或者授权文件的方式获得。</p><p>OCR Android SDK提供了以下3种AccessToken管理方法.</p><h3>API Key / Secret Key</h3><p>此种身份验证方案使用AK/SK获得AccessToken。</p><p>虽然SDK对网络传输的敏感数据进行了二次加密，但由于AK/SK是明文填写在代码中，在移动设备中可能会存在AK/SK被盗取的风险。有安全考虑的开发者可使用第二种授权方案。</p><p>使用步骤：</p><ol><li>在<a href=\"https://console.bce.baidu.com/ai/?fromai=1&amp;_=1488766023093#/ai/ocr/app/list\" target=\"_blank\">管理控制台</a>中配置OCR应用</li><li>复制应用的Api Key（简称AK） 和 Secret Key（简称SK），初始化<code><span class=\"hljs-attribute\">OCR</span></code>单例：</li></ol><pre>\n<code class=\"hljs\" lang=\"\">OCR.getInstance().initAccessTokenWithAkSk(<span class=\"hljs-keyword\">new</span> OnResultListener&lt;AccessToken&gt;() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onResult</span><span class=\"hljs-params\">(AccessToken result)</span> </span>{\n        <span class=\"hljs-comment\">// 调用成功，返回AccessToken对象</span>\n        String token = result.getAccessToken();\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onError</span><span class=\"hljs-params\">(OCRError <span class=\"hljs-keyword\">error</span>)</span> </span>{\n        <span class=\"hljs-comment\">// 调用失败，返回OCRError子类SDKError对象</span>\n    }\n}, getApplicationContext(), <span class=\"hljs-string\">\"您的应用AK\"</span>, <span class=\"hljs-string\">\"您的应用SK\"</span>);</code>\n</pre><p>由于AK/SK是明文填写在代码中，在移动设备中可能会存在AK/SK被盗取的风险。有安全考虑的开发者可使用第二种授权方案。</p><h3>授权文件（安全模式）</h3><p>此种身份验证方案使用授权文件获得AccessToken，缓存在本地。<strong><em>建议有安全考虑的开发者使用此种身份验证方式。</em></strong></p><p>在您的移动APP分发出去之后，APP存在被反编译的可能，所以直接将AK / SK 置于APP源码之中，存在被盗取的风险。采用授权文件的身份验证方法，可有效保护AK/SK在移动设备中的安全。攻击者即使拦截了流量，盗取了授权文件，也难以盗用您的配额。</p><p>使用步骤：</p><ol><li>在<a href=\"https://console.bce.baidu.com/ai/?fromai=1&amp;_=1488766023093#/ai/ocr/app/list\" target=\"_blank\">官网</a>中配置应用</li><li>下载对应应用的授权文件</li><li>将授权文件添加至工程asserts文件夹，文件名必须为<code>aip.<span class=\"hljs-meta\">license</span></code></li><li>调用initAccessToken方法，初始化OCR单例：</li></ol><pre>\n<code class=\"hljs\" lang=\"\">OCR.getInstance().initAccessToken(<span class=\"hljs-keyword\">new</span> OnResultListener&lt;AccessToken&gt;() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onResult</span><span class=\"hljs-params\">(AccessToken result)</span> </span>{\n        <span class=\"hljs-comment\">// 调用成功，返回AccessToken对象</span>\n        String token = result.getAccessToken();\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onError</span><span class=\"hljs-params\">(OCRError <span class=\"hljs-keyword\">error</span>)</span> </span>{\n        <span class=\"hljs-comment\">// 调用失败，返回OCRError子类SDKError对象</span>\n    }\n}, getApplicationContext());</code>\n</pre><h3>自助AccessToken管理</h3><p>此种身份验证方案直接使用开发者提供的AccessToken。</p><p>若开发者的应用有自行搭建的服务端，也可在自己的服务端进行token的获取与管理，然后分配给移动客户端使用。token的获得可以参考<a href=\"http://ai.baidu.com/docs#Beginner-Auth\" target=\"_blank\">API鉴权认证机制</a>。此种授权方案在移动客户端上没有任何AK/SK信息，风险系数低，但需要开发者自行管理token的获取与分配，适合有条件的开发者使用。</p><p>使用步骤：</p><ol><li>将您需要使用的token传入对应的构造函数，初始化<code><span class=\"hljs-attribute\">OCR</span></code>单例：</li></ol><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-selector-tag\">OCR</span><span class=\"hljs-selector-class\">.getInstance</span>()<span class=\"hljs-selector-class\">.initWithToken</span>(getApplicationContext(), <span class=\"hljs-string\">\"自行获取的access_token\"</span>);</code>\n</pre><h1 id=\"cb0f8b1c\">接口调用说明</h1><h2 id=\"f01bf7e2\">OCR-UI模块</h2><p>OCR-UI模块提供了一套默认的UI。如需使用，请将ocr_ui模块包含到您的工程，具体使用可参考示例工程（OCRDemo）的IdCardActivity、BankCardActivity和GeneralActivity文件。</p><h3>OCR-UI模块调用示例</h3><p>调用拍摄activity</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 生成intent对象</span>\n<span class=\"hljs-type\">Intent</span> intent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title\">Intent</span>(<span class=\"hljs-type\">IDCardActivity</span>.this, <span class=\"hljs-type\">CameraActivity</span>.class);\n\n<span class=\"hljs-comment\">// 设置临时存储</span>\n<span class=\"hljs-title\">intent</span>.<span class=\"hljs-title\">putExtra</span>(<span class=\"hljs-type\">CameraActivity</span>.<span class=\"hljs-type\">KEY_OUTPUT_FILE_PATH</span>,                     <span class=\"hljs-type\">FileUtil</span>.getSaveFile(getApplication()).<span class=\"hljs-title\">getAbsolutePath</span>());\n\n<span class=\"hljs-comment\">// 调用拍摄银行卡正面的activity</span>\n<span class=\"hljs-title\">intent</span>.<span class=\"hljs-title\">putExtra</span>(<span class=\"hljs-type\">CameraActivity</span>.<span class=\"hljs-type\">KEY_CONTENT_TYPE</span>, <span class=\"hljs-type\">CameraActivity</span>.<span class=\"hljs-type\">CONTENT_TYPE_ID_CARD_FRONT</span>);\n<span class=\"hljs-title\">startActivityForResult</span>(intent, <span class=\"hljs-type\">REQUEST_CODE_CAMERA</span>);</span></code>\n</pre><p>通过onActivityResult获取拍摄结果</p><pre>\n<code class=\"hljs\" lang=\"\">@Override\n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-literal\">void</span> onActivityResult(int requestCode, int resultCode, Intent <span class=\"hljs-built_in\">data</span>) {\n    <span class=\"hljs-comment\">// 获取调用参数</span>\n    <span class=\"hljs-built_in\">String</span> contentType = <span class=\"hljs-built_in\">data</span>.getStringExtra(CameraActivity.KEY_CONTENT_TYPE);\n    <span class=\"hljs-comment\">// 通过临时文件获取拍摄的图片</span>\n    <span class=\"hljs-built_in\">String</span> filePath = FileUtil.getSaveFile(getApplicationContext()).getAbsolutePath();\n    <span class=\"hljs-comment\">// 判断拍摄类型（通用，身份证，银行卡）</span>\n    <span class=\"hljs-keyword\">if</span> (requestCode == REQUEST_CODE_CAMERA &amp;&amp; resultCode == Activity.RESULT_OK) {\n    <span class=\"hljs-comment\">// 判断是否是身份证正面</span>\n        <span class=\"hljs-keyword\">if</span> (CameraActivity.CONTENT_TYPE_ID_CARD_FRONT.<span class=\"hljs-keyword\">equals</span>(contentType)){\n        <span class=\"hljs-comment\">// 获取图片文件调用sdk数据接口，见数据接口说明</span>\n        }\n    }\n}</code>\n</pre><h2 id=\"34e284a2\">数据接口</h2><h3>通用文字识别</h3><ul><li>调用示例</li></ul><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 通用文字识别参数设置</span>\nGeneralParams param = <span class=\"hljs-keyword\">new</span> GeneralParams();\nparam.setDetectDirection(<span class=\"hljs-keyword\">true</span>);\nparam.setImageFile(<span class=\"hljs-keyword\">new</span> File(filePath));\n\n<span class=\"hljs-comment\">// 调用通用文字识别服务</span>\nOCR.getInstance().recognizeGeneral(param, <span class=\"hljs-keyword\">new</span> OnResultListener&lt;GeneralResult&gt;() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onResult</span><span class=\"hljs-params\">(GeneralResult result)</span> </span>{\n        <span class=\"hljs-comment\">// 调用成功，返回GeneralResult对象</span>\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onError</span><span class=\"hljs-params\">(OCRError <span class=\"hljs-keyword\">error</span>)</span> </span>{\n        <span class=\"hljs-comment\">// 调用失败，返回OCRError对象</span>\n    }\n});</code>\n</pre><p><strong>options参数详情</strong></p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>可选值范围</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>true</td><td>string</td><td>-</td><td>图像数据，base64编码，要求base64编码后大小不超过1M，最短边至少15px，最长边最大2048px,支持jpg/png/bmp格式</td></tr><tr><td>recognize_granularity</td><td>false</td><td>string</td><td>big、small</td><td>是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置</td></tr><tr><td>mask</td><td>false</td><td>string</td><td>-</td><td>表示mask区域的黑白灰度图片，白色代表选中, base64编码</td></tr><tr><td>language_type</td><td>false</td><td>string</td><td>CHN_ENG、ENG、POR、FRE、GER、ITA、SPA、RUS、JAP</td><td>识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语</td></tr><tr><td>detect_direction</td><td>false</td><td>boolean</td><td>true、false</td><td>是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。</td></tr><tr><td>detect_language</td><td>false</td><td>string</td><td>true、false</td><td>是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）</td></tr><tr><td>classify_dimension</td><td>false</td><td>string</td><td>lottery</td><td>分类维度（根据OCR结果进行分类），逗号分隔，当前只支持lottery。<br>lottery：彩票分类，设置detect_direction有助于提升精度</td></tr><tr><td>vertexes_location</td><td>false</td><td>string</td><td>true、false</td><td>是否返回文字外接多边形顶点位置，不支持单字位置。默认为false</td></tr></tbody></table><ul><li>结果返回</li></ul><table><thead><tr><th>字段</th><th>必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>direction</td><td>否</td><td>int32</td><td>图像方向，当detect_direction=true时存在。<br>- -1:未定义，<br>- 0:正向，<br>- 1: 逆时针90度，<br>- 2:逆时针180度，<br>- 3:逆时针270度</td></tr><tr><td>log_id</td><td>是</td><td>uint64</td><td>唯一的log id，用于问题定位</td></tr><tr><td>words_result</td><td>是</td><td>array()</td><td>定位和识别结果数组</td></tr><tr><td>words_result_num</td><td>是</td><td>uint32</td><td>识别结果数，表示words_result的元素个数</td></tr><tr><td>+vertexes_location</td><td>否</td><td>array()</td><td>当前为四个顶点: 左上，右上，右下，左下。当vertexes_location=true时存在</td></tr><tr><td>++x</td><td>是</td><td>uint32</td><td>水平坐标（坐标0点为左上角）</td></tr><tr><td>++y</td><td>是</td><td>uint32</td><td>垂直坐标（坐标0点为左上角）</td></tr><tr><td>+location</td><td>是</td><td>array()</td><td>位置数组（坐标0点为左上角）</td></tr><tr><td>++left</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td>++top</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td>++width</td><td>是</td><td>uint32</td><td>表示定位位置的长方形的宽度</td></tr><tr><td>++height</td><td>是</td><td>uint32</td><td>表示定位位置的长方形的高度</td></tr><tr><td>+words</td><td>否</td><td>string</td><td>识别结果字符串</td></tr><tr><td>+chars</td><td>否</td><td>array()</td><td>单字符结果，recognize_granularity=small时存在</td></tr><tr><td>++location</td><td>是</td><td>array()</td><td>位置数组（坐标0点为左上角）</td></tr><tr><td>+++left</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td>+++top</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td>+++width</td><td>是</td><td>uint32</td><td>表示定位定位位置的长方形的宽度</td></tr><tr><td>+++height</td><td>是</td><td>uint32</td><td>表示位置的长方形的高度</td></tr><tr><td>++char</td><td>是</td><td>string</td><td>单字符识别结果</td></tr></tbody></table><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 示例</span>\n{\n    <span class=\"hljs-string\">direction :</span> <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-string\">log_id :</span> <span class=\"hljs-number\">676709620</span>,\n    <span class=\"hljs-string\">words_result :</span> [ {\n            <span class=\"hljs-string\">location :</span> {\n                <span class=\"hljs-string\">height :</span> <span class=\"hljs-number\">20</span>;\n                <span class=\"hljs-string\">left :</span> <span class=\"hljs-number\">86</span>;\n                <span class=\"hljs-string\">top :</span> <span class=\"hljs-number\">387</span>;\n                <span class=\"hljs-string\">width :</span> <span class=\"hljs-number\">22</span>;\n            };\n            <span class=\"hljs-string\">words :</span> <span class=\"hljs-string\">\"N\"</span>;\n        },\n    ],\n    <span class=\"hljs-string\">words_result_num :</span> <span class=\"hljs-number\">1</span>;\n}</code>\n</pre><h3>银行卡识别</h3><ul><li>调用示例</li></ul><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 银行卡识别参数设置</span>\nBankCardParams param = <span class=\"hljs-keyword\">new</span> BankCardParams();\nparam.setImageFile(<span class=\"hljs-keyword\">new</span> File(filePath));\n\n<span class=\"hljs-comment\">// 调用银行卡识别服务</span>\nOCR.getInstance().recognizeBankCard(param, <span class=\"hljs-keyword\">new</span> OnResultListener&lt;BankCardResult&gt;() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onResult</span><span class=\"hljs-params\">(BankCardResult result)</span> </span>{\n        <span class=\"hljs-comment\">// 调用成功，返回BankCardResult对象</span>\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onError</span><span class=\"hljs-params\">(OCRError <span class=\"hljs-keyword\">error</span>)</span> </span>{\n        <span class=\"hljs-comment\">// 调用失败，返回OCRError对象</span>\n    }\n});</code>\n</pre><ul><li>结果返回</li></ul><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th></tr></thead><tbody><tr><td style=\"text-align:left\">log_id</td><td style=\"text-align:left\">Uint64</td><td style=\"text-align:left\">唯一的log id，用于问题定位</td></tr><tr><td style=\"text-align:left\">result</td><td style=\"text-align:left\">Object</td><td style=\"text-align:left\">定位和识别结果数组</td></tr><tr><td style=\"text-align:left\">+bank_card_number</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">银行卡识别结果</td></tr><tr><td style=\"text-align:left\">+bank_name</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">银行名，不能识别时为空</td></tr><tr><td style=\"text-align:left\">+bank_card_type</td><td style=\"text-align:left\">uint32</td><td style=\"text-align:left\">银行卡类型，0:不能识别; 1: 借记卡; 2: 信用卡</td></tr></tbody></table><pre>\n<code class=\"hljs\" lang=\"\"> <span class=\"hljs-comment\">// 示例</span>\n {\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">3207866271</span>;\n<span class=\"hljs-symbol\">    result:</span> {\n        <span class=\"hljs-string\">\"bank_card_number\"</span>: <span class=\"hljs-string\">\"6226 2288 8888 8888\"</span>,\n        <span class=\"hljs-string\">\"bank_card_type\"</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">\"bank_name\"</span>: <span class=\"hljs-string\">\"\\U5de5\\U5546\\U94f6\\U884c\"</span>\n    };\n}</code>\n</pre><h3>身份证识别</h3><ul><li>调用示例</li></ul><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 身份证识别参数设置</span>\nIDCardParams param = <span class=\"hljs-keyword\">new</span> IDCardParams();\nparam.setImageFile(<span class=\"hljs-keyword\">new</span> File(filePath));\n\n<span class=\"hljs-comment\">// 调用身份证识别服务</span>\nOCR.getInstance().recognizeIDCard(param, <span class=\"hljs-keyword\">new</span> OnResultListener&lt;IDCardResult&gt;() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onResult</span><span class=\"hljs-params\">(IDCardResult result)</span> </span>{\n        <span class=\"hljs-comment\">// 调用成功，返回IDCardResult对象</span>\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onError</span><span class=\"hljs-params\">(OCRError <span class=\"hljs-keyword\">error</span>)</span> </span>{\n        <span class=\"hljs-comment\">// 调用失败，返回OCRError对象</span>\n    }\n});</code>\n</pre><p><strong>options参数</strong></p><table><thead><tr><th>参数</th><th>必选</th><th>范围</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>true</td><td></td><td>String</td><td>图像数据，支持本地图像文件路径，图像文件二进制数据，要求base64编码后大小不超过1M，最短边至少15px，最长边最大2048px,支持jpg/png/bmp格式</td></tr><tr><td>isFront</td><td>true</td><td>true、false</td><td>Boolean</td><td>true：身份证正面，false：身份证背面</td></tr><tr><td>detect_direction</td><td>false</td><td>true、false</td><td>string</td><td>是否检测图像朝向，默认不检测，即：false。可选值为：true - 检测图像朝向；false - 不检测图像朝向。朝向是指输入图像是正常方向、逆时针旋转90/180/270度</td></tr><tr><td>accuracy</td><td>false</td><td>auto、normal、high</td><td>string</td><td>精准度，精度越高，速度越慢。default：auto</td></tr></tbody></table><ul><li>结果返回</li></ul><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th></tr></thead><tbody><tr><td style=\"text-align:left\">direction</td><td style=\"text-align:left\">Int32</td><td style=\"text-align:left\">图像方向，当detect_direction=true时存在。-1:未定义，0:正向，1: 逆时针90度， 2:逆时针180度， 3:逆时针270度</td></tr><tr><td style=\"text-align:left\">log_id</td><td style=\"text-align:left\">Uint64</td><td style=\"text-align:left\">唯一的log id，用于问题定位</td></tr><tr><td style=\"text-align:left\">words_result</td><td style=\"text-align:left\">Array</td><td style=\"text-align:left\">定位和识别结果数组，数组元素的key是身份证的主体字段（正面支持：住址、公民身份号码、出生、姓名、性别、民族，背面支持：签发日期、失效日期）。只返回识别出的字段。若身份证号码校验不通过，则不返回</td></tr><tr><td style=\"text-align:left\">words_result_num</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">识别结果数，表示words_result的元素个数</td></tr><tr><td style=\"text-align:left\">+location</td><td style=\"text-align:left\">Array</td><td style=\"text-align:left\">位置数组（坐标0点为左上角）</td></tr><tr><td style=\"text-align:left\">++left</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td style=\"text-align:left\">++top</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td style=\"text-align:left\">++width</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形的宽度</td></tr><tr><td style=\"text-align:left\">++height</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形的高度</td></tr><tr><td style=\"text-align:left\">+words</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">识别结果字符串</td></tr></tbody></table><pre>\n<code class=\"hljs\" lang=\"\">//示例\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">7037721</span>,\n    <span class=\"hljs-string\">\"direction\"</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">\"words_result_num\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-string\">\"words_result\"</span>: {\n        <span class=\"hljs-string\">\"住址\"</span>: {\n            <span class=\"hljs-string\">\"location\"</span>: {\n                <span class=\"hljs-string\">\"left\"</span>: <span class=\"hljs-number\">227</span>,\n                <span class=\"hljs-string\">\"top\"</span>: <span class=\"hljs-number\">235</span>,\n                <span class=\"hljs-string\">\"width\"</span>: <span class=\"hljs-number\">229</span>,\n                <span class=\"hljs-string\">\"height\"</span>: <span class=\"hljs-number\">51</span>\n            },\n            <span class=\"hljs-string\">\"words\"</span>: <span class=\"hljs-string\">\"湖北省天门市渔薪镇杨咀村一组2号\"</span>,\n        }\n        ...\n    }\n}</code>\n</pre><h1 id=\"1fe5dc4e\">错误码表</h1><p><strong>验证错误</strong></p><table><thead><tr><th>错误码</th><th>错误信息</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>110</td><td>Access token invalid or no longer valid</td><td>Access Token过期失效</td><td>请重新获得有效的Token</td></tr><tr><td>283501</td><td>License file check error</td><td>授权文件不匹配</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置正确的包名，并确认使用了正确的授权文件</td></tr><tr><td>283502</td><td>App identifier unmatch</td><td>BundleId不匹配</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置正确的包名，并确认使用了正确的授权文件</td></tr><tr><td>283503</td><td>License file not exists</td><td>请确认aip.licence文件存在于assets文件夹中</td><td></td></tr><tr><td>283504</td><td>Network error</td><td>网络请求失败</td><td>请授权App网络权限并保证网络通畅</td></tr><tr><td>283505</td><td>Server illegal response</td><td>服务器返回数据异常</td><td></td></tr><tr><td>283506</td><td>Load jni so library error</td><td>JNI加载异常</td><td>请确认开发包中的so库被正确加载</td></tr><tr><td>283601</td><td>Server authentication error</td><td>身份验证错误。</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置应用，并确认填写了正确的AK/SK，或使用了正确的授权文件</td></tr><tr><td>283602</td><td>Authentication time error</td><td>时间戳不正确，可能是设备时间异常。</td><td>请确保不要改变调用设备的本地时间</td></tr><tr><td>283604</td><td>App identifier unmatch</td><td>错误的PackageName或者BundleId</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置正确的包名，并确认使用了正确的授权文件</td></tr><tr><td>283700</td><td>Server internal error</td><td>服务器内部错误</td><td>您可以在工单系统中提交错误信息中的logId，我们将尝试帮您排查错误原因</td></tr></tbody></table><p><strong>服务错误</strong></p><table><thead><tr><th>错误码</th><th>错误信息</th><th>描述</th></tr></thead><tbody><tr><td>216015</td><td>module closed</td><td>模块关闭</td></tr><tr><td>216100</td><td>invalid param</td><td>非法参数</td></tr><tr><td>216101</td><td>not enough param</td><td>参数数量不够</td></tr><tr><td>216102</td><td>service not support</td><td>业务不支持</td></tr><tr><td>216103</td><td>param too long</td><td>参数太长</td></tr><tr><td>216110</td><td>appid not exist</td><td>APP ID不存在</td></tr><tr><td>216111</td><td>invalid userid</td><td>非法用户ID</td></tr><tr><td>216200</td><td>empty image</td><td>空的图片</td></tr><tr><td>216201</td><td>image format error</td><td>图片格式错误</td></tr><tr><td>216202</td><td>image size error</td><td>图片大小错误</td></tr><tr><td>216500</td><td>unknown error</td><td>未知错误</td></tr><tr><td>216600</td><td>id number format error</td><td>身份证的ID格式错误</td></tr><tr><td>216601</td><td>id number and name not match</td><td>身份证的ID和名字不匹配</td></tr><tr><td>216630</td><td>recognize error</td><td>识别错误</td></tr><tr><td>216631</td><td>recognize bank card error</td><td>识别银行卡错误（通常为检测不到银行卡）</td></tr><tr><td>216632</td><td>ocr</td><td>unknown error</td></tr><tr><td>216633</td><td>recognize idcard error</td><td>识别身份证错误（通常为检测不到身份证）</td></tr><tr><td>216634</td><td>detect error</td><td>检测错误</td></tr><tr><td>216635</td><td>get mask error</td><td>获取mask图片错误</td></tr><tr><td>282000</td><td>logic internal error</td><td>业务逻辑层内部错误</td></tr><tr><td>282001</td><td>logic backend error</td><td>业务逻辑层后端服务错误</td></tr><tr><td>282002</td><td>input encoding error</td><td>请求参数编码错误</td></tr><tr><td>282100</td><td>image transcode error</td><td>图片压缩转码错误</td></tr></tbody></table><h1 id=\"4c929c9c\">版本更新记录</h1><table><thead><tr><th>上线日期</th><th>版本号</th><th>更新内容</th></tr></thead><tbody><tr><td>2017.4.13</td><td>1.0.2</td><td>修复部分用户使用ak，sk方式无法获取token的问题</td></tr><tr><td>2017.3.23</td><td>1.0.1</td><td>更新demo获取token失败的错误提示的交互</td></tr><tr><td>2017.3.16</td><td>1.0.0</td><td>在线OCR第一版！</td></tr></tbody></table>",
  "headings": [
    {
      "level": 1,
      "text": "OCR Android SDK 开发者文档",
      "id": "6ab648fa"
    },
    {
      "level": 1,
      "text": "快速入门",
      "id": "1ebd2e02"
    },
    {
      "level": 2,
      "text": "开发包说明",
      "id": "e7660123"
    },
    {
      "level": 2,
      "text": "DEMO使用说明",
      "id": "b3e93a0a"
    },
    {
      "level": 2,
      "text": "身份验证与安全",
      "id": "7bb09719"
    },
    {
      "level": 1,
      "text": "接口调用说明",
      "id": "cb0f8b1c"
    },
    {
      "level": 2,
      "text": "OCR-UI模块",
      "id": "f01bf7e2"
    },
    {
      "level": 2,
      "text": "数据接口",
      "id": "34e284a2"
    },
    {
      "level": 1,
      "text": "错误码表",
      "id": "1fe5dc4e"
    },
    {
      "level": 1,
      "text": "版本更新记录",
      "id": "4c929c9c"
    }
  ]
}
