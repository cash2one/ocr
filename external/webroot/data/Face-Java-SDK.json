{
  "html": "<h1 id=\"04005fec\">Java SDK文档</h1><h1 id=\"5ea2115a\">简介</h1><p>Hi，您好，欢迎使用百度人脸识别API服务。</p><p>本文档主要针对API开发者，描述百度人脸识别接口服务的相关技术内容。如果您对文档内容有任何疑问，可以通过以下几种方式联系我们：</p><ul><li>在百度云控制台内<a href=\"http://ticket.bce.baidu.com/#/ticket/create\" target=\"_blank\">提交工单</a>，咨询问题类型请选择<strong>人工智能服务</strong>；</li><li>加入<strong>开发者QQ群</strong>：224994340；</li></ul><h2 id=\"7e79d55d\">接口能力</h2><table><thead><tr><th style=\"text-align:left\">接口名称</th><th style=\"text-align:left\">接口能力简要描述</th></tr></thead><tbody><tr><td style=\"text-align:left\"><a href=\"#%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B\" target=\"_blank\">人脸检测</a></td><td style=\"text-align:left\">检测人脸并定位，返回五官关键点，及人脸各属性值</td></tr><tr><td style=\"text-align:left\"><a href=\"#%E4%BA%BA%E8%84%B8%E6%AF%94%E5%AF%B9\" target=\"_blank\">人脸比对</a></td><td style=\"text-align:left\">返回两两比对的人脸相似值</td></tr><tr><td style=\"text-align:left\"><a href=\"#%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB\" target=\"_blank\">人脸识别</a></td><td style=\"text-align:left\">在人脸库中查找相似的人脸</td></tr><tr><td style=\"text-align:left\"><a href=\"#%E4%BA%BA%E8%84%B8%E8%AE%A4%E8%AF%81\" target=\"_blank\">人脸认证</a></td><td style=\"text-align:left\">识别上传的图片是否为指定用户</td></tr><tr><td style=\"text-align:left\"><a href=\"#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C\" target=\"_blank\">人脸库设置</a></td><td style=\"text-align:left\">对人脸库的相关操作，如注册、删除、更新、查找用户信息等</td></tr></tbody></table><h2 id=\"c2320935\">版本更新记录</h2><table><thead><tr><th>上线日期</th><th>版本号</th><th>更新内容</th></tr></thead><tbody><tr><td>2017.4.27</td><td>1.3.4</td><td>人脸比对、识别、认证和人脸库设置接口升级为v2版本</td></tr><tr><td>2017.4.20</td><td>1.3.3</td><td>AI SDK同步版本更新</td></tr><tr><td>2017.4.13</td><td>1.3.2</td><td>AI SDK同步版本更新</td></tr><tr><td>2017.3.23</td><td>1.3</td><td>兼容Android环境</td></tr><tr><td>2017.3.2</td><td>1.2</td><td>上线人脸查找接口，增加对图片参数要求限制的检查，增加设置超时接口</td></tr><tr><td>2017.1.20</td><td>1.1</td><td>上线人脸比对接口，同时修复部分云用户调用不成功的错误</td></tr><tr><td>2017.1.6</td><td>1.0</td><td>初始版本，上线人脸属性识别接口</td></tr></tbody></table><p>#快速入门</p><h2 id=\"ab87a30a\">安装人脸检测 Java SDK</h2><p><strong>Face Java SDK目录结构</strong></p><pre>\n<code class=\"hljs\" lang=\"\">com<span class=\"hljs-selector-class\">.baidu</span><span class=\"hljs-selector-class\">.aip</span>\n       ├── auth                                <span class=\"hljs-comment\">//签名相关类</span>\n       ├── http                                <span class=\"hljs-comment\">//Http通信相关类</span>\n       ├── client                              <span class=\"hljs-comment\">//公用类</span>\n       ├── exception                           <span class=\"hljs-comment\">//exception类</span>\n       ├── face\n       │       └── AipFace                     <span class=\"hljs-comment\">//AipFace类</span>\n       └── util                                <span class=\"hljs-comment\">//工具类</span></code>\n</pre><p><strong>支持 JAVA版本：1.7+</strong></p><p><strong>直接使用JAR包步骤如下：</strong></p><p>1.在<a href=\"http://ai.baidu.com/sdk\" target=\"_blank\">官方网站</a>下载Java SDK压缩工具包。</p><p>2.将下载的<code>aip-face-java-sdk-<span class=\"hljs-keyword\">version</span>.<span class=\"hljs-keyword\">zip</span></code>解压后，复制到工程文件夹中。</p><p>3.在Eclipse右键“工程 -&gt; Properties -&gt; Java Build Path -&gt; Add JARs”。</p><p>4.添加SDK工具包<code>face_sdk-<span class=\"hljs-built_in\">version</span>.jar</code>和第三方依赖工具包<code><span class=\"hljs-keyword\">third</span>-party/*.jar</code>。</p><p>其中，<code><span class=\"hljs-built_in\">version</span></code>为版本号，添加完成后，用户就可以在工程中使用Face Java SDK。</p><h2 id=\"fa116362\">新建AipFaceClient</h2><p>1.初始化一个AipFaceClient。</p><p>AipFaceClient是与Baidu Face Recognition交互的客户端，所有人脸识别操作都是通过AipFaceClient完成的。</p><p>用户可以参考如下代码新建一AipFaceClient：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> class Sample {\n\n    <span class=\"hljs-comment\">//设置APPID/AK/SK</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> APP_ID = <span class=\"hljs-string\">\"你的 App ID\"</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> API_KEY = <span class=\"hljs-string\">\"你的 Api ID\"</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">String</span> SECRET_KEY = <span class=\"hljs-string\">\"你的 Secret Key\"</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> main(<span class=\"hljs-keyword\">String</span>[] args) {\n\n        <span class=\"hljs-comment\">// 初始化一个FaceClient</span>\n        AipFace client = <span class=\"hljs-keyword\">new</span> AipFace(APP_ID, API_KEY, SECRET_KEY);\n\n        <span class=\"hljs-comment\">// 可选：设置网络连接参数</span>\n        client.setConnectionTimeoutInMillis(<span class=\"hljs-number\">2000</span>);\n        client.setSocketTimeoutInMillis(<span class=\"hljs-number\">60000</span>);\n\n        <span class=\"hljs-comment\">// 调用API</span>\n        <span class=\"hljs-keyword\">String</span> <span class=\"hljs-built_in\">image</span> = <span class=\"hljs-string\">\"test.jpg\"</span>;\n        <span class=\"hljs-keyword\">JSONObject</span> res = client.detect(path, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;());\n        System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n    }\n}</code>\n</pre><p>在上面代码中，常量<code>APP_ID</code>在百度云控制台中创建，常量<code>API_KEY</code>与<code>SECRET_KEY</code>是在创建完毕应用后，系统分配给用户的，均为字符串，用于标识用户，为访问做签名验证，可在AI服务控制台中的<strong>应用列表</strong>中查看。</p><p><strong>注意：</strong>如您以前是百度云的老用户，其中<code>API_KEY</code>对应百度云的“Access Key ID”，<code>SECRET_KEY</code>对应百度云的“Access Key Secret”。</p><h2 id=\"4d749445\">配置AipFaceClient</h2><p>如果用户需要配置AipFaceClient的一些细节参数，可以在构造AipFace之后调用接口设置参数，目前只支持以下参数：</p><table><thead><tr><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>setConnectionTimeoutInMillis</td><td>建立连接的超时时间（单位：毫秒）</td></tr><tr><td>setSocketTimeoutInMillis</td><td>通过打开的连接传输数据的超时时间（单位：毫秒）</td></tr></tbody></table><p>#接口调用</p><h2 id=\"a1e0679a\">人脸检测</h2><h3>接口描述</h3><p>检测请求图片中的人脸，返回人脸位置、72个关键点坐标、及人脸相关属性信息。</p><p>检测响应速度，与图片中人脸数量相关，人脸数量较多时响应时间会有些许延长。</p><p>典型应用场景：如<strong>人脸属性分析</strong>，<strong>基于人脸关键点的加工分析</strong>，<strong>人脸营销活动</strong>等。</p><blockquote><p>五官位置会标记具体坐标；72个关键点坐标也包含具体坐标，但不包含对应位置的详细位置描述。</p></blockquote><h3>请求说明</h3><p>图片接受类型支持本地图片路径字符串，图片文件二进制数组。</p><p>举例，要对一张图片进行人脸识别，具体的人脸信息在返回的result字段中：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> faceRecognize(AipFace client) {\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath = <span class=\"hljs-string\">\"picture.jpg\"</span>;\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.detect(imagePath);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n\n    <span class=\"hljs-comment\">// 参数为本地图片文件二进制数组</span>\n    <span class=\"hljs-built_in\">byte</span>[] file = readImageFile(imagePath);    <span class=\"hljs-comment\">// readImageFile函数仅为示例</span>\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.detect(file);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p>传入图片时还想增加一些自定义参数配置：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> faceRecognize(AipFace client) {\n    <span class=\"hljs-comment\">// 自定义参数定义</span>\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;();\n    options.put(<span class=\"hljs-string\">\"max_face_num\"</span>, <span class=\"hljs-string\">\"1\"</span>);\n    options.put(<span class=\"hljs-string\">\"face_fields\"</span>, <span class=\"hljs-string\">\"expression\"</span>);\n\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath = <span class=\"hljs-string\">\"face.jpg\"</span>;\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.detect(imagePath, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n\n    <span class=\"hljs-comment\">// 参数为本地图片文件二进制数组</span>\n    <span class=\"hljs-built_in\">byte</span>[] file = readImageFile(imagePath);\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.detect(file, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p><strong>人脸检测 请求参数详情</strong></p><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th><th style=\"text-align:left\">是否必须</th></tr></thead><tbody><tr><td style=\"text-align:left\">face_fields</td><td style=\"text-align:left\">Boolean</td><td style=\"text-align:left\">包括age、beauty、expression、faceshape、gender、glasses、landmark、race、qualities信息，逗号分隔，默认只返回人脸框、概率和旋转角度。</td><td style=\"text-align:left\">否</td></tr><tr><td style=\"text-align:left\">max_face_num</td><td style=\"text-align:left\">unit32</td><td style=\"text-align:left\">最多处理人脸数目，默认值1</td><td style=\"text-align:left\">是</td></tr><tr><td style=\"text-align:left\">image</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">图像数据，支持本地图像文件路径，图像文件二进制数组</td><td style=\"text-align:left\">是</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">是否一定输出</th><th style=\"text-align:left\">描述</th></tr></thead><tbody><tr><td style=\"text-align:left\">log_id</td><td style=\"text-align:left\">uint64</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">日志id</td></tr><tr><td style=\"text-align:left\">result_num</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸数目</td></tr><tr><td style=\"text-align:left\">result</td><td style=\"text-align:left\">object[]</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸属性对象的集合</td></tr><tr><td style=\"text-align:left\">+age</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">年龄。face_fields包含age时返回</td></tr><tr><td style=\"text-align:left\">+beauty</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">美丑打分，范围0-1，越大表示越美。face_fields包含beauty时返回</td></tr><tr><td style=\"text-align:left\">+location</td><td style=\"text-align:left\">object</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸在图片中的位置</td></tr><tr><td style=\"text-align:left\">++left</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸区域离左边界的距离</td></tr><tr><td style=\"text-align:left\">++top</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸区域离上边界的距离</td></tr><tr><td style=\"text-align:left\">++width</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸区域的宽度</td></tr><tr><td style=\"text-align:left\">++height</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸区域的高度</td></tr><tr><td style=\"text-align:left\">+face_probability</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸置信度，范围0-1</td></tr><tr><td style=\"text-align:left\">+rotation_angle</td><td style=\"text-align:left\">int32</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸框相对于竖直方向的顺时针旋转角，[-180,180]</td></tr><tr><td style=\"text-align:left\">+yaw</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">三维旋转之左右旋转角[-90(左), 90(右)]</td></tr><tr><td style=\"text-align:left\">+pitch</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">三维旋转之俯仰角度[-90(上), 90(下)]</td></tr><tr><td style=\"text-align:left\">+roll</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">平面内旋转角[-180(逆时针), 180(顺时针)]</td></tr><tr><td style=\"text-align:left\">+expression</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">表情，0，不笑；1，微笑；2，大笑。face_fields包含expression时返回</td></tr><tr><td style=\"text-align:left\">+expression_probability</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">表情置信度，范围0~1。face_fields包含expression时返回</td></tr><tr><td style=\"text-align:left\">+faceshape</td><td style=\"text-align:left\">object[]</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">脸型置信度。face_fields包含faceshape时返回</td></tr><tr><td style=\"text-align:left\">++type</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">脸型：square/triangle/oval/heart/round</td></tr><tr><td style=\"text-align:left\">++probability</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">置信度：0~1</td></tr><tr><td style=\"text-align:left\">+gender</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">male、female。face_fields包含gender时返回</td></tr><tr><td style=\"text-align:left\">+gender_probability</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">性别置信度，范围0~1。face_fields包含gender时返回</td></tr><tr><td style=\"text-align:left\">+glasses</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">是否带眼镜，0-无眼镜，1-普通眼镜，2-墨镜。face_fields包含glasses时返回</td></tr><tr><td style=\"text-align:left\">+glasses_probability</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">眼镜置信度，范围0~1。face_fields包含glasses时返回</td></tr><tr><td style=\"text-align:left\">+landmark</td><td style=\"text-align:left\">object[]</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">4个关键点位置，左眼中心、右眼中心、鼻尖、嘴中心。face_fields包含landmark时返回</td></tr><tr><td style=\"text-align:left\">++x</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">x坐标</td></tr><tr><td style=\"text-align:left\">++y</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">y坐标</td></tr><tr><td style=\"text-align:left\">+landmark72</td><td style=\"text-align:left\">object[]</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">72个特征点位置，示例图 。face_fields包含landmark时返回</td></tr><tr><td style=\"text-align:left\">++x</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">x坐标</td></tr><tr><td style=\"text-align:left\">++y</td><td style=\"text-align:left\">Int</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">y坐标</td></tr><tr><td style=\"text-align:left\">+race</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">yellow、white、black、arabs。face_fields包含race时返回</td></tr><tr><td style=\"text-align:left\">+race_probability</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">人种置信度，范围0~1。face_fields包含race时返回</td></tr><tr><td style=\"text-align:left\">+qualities</td><td style=\"text-align:left\">object</td><td style=\"text-align:left\">否</td><td style=\"text-align:left\">人脸质量信息。face_fields包含qualities时返回</td></tr><tr><td style=\"text-align:left\">++occlusion</td><td style=\"text-align:left\">object</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">人脸各部分遮挡的概率， [0, 1] （待上线）</td></tr><tr><td style=\"text-align:left\">+++left_eye</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">左眼</td></tr><tr><td style=\"text-align:left\">+++right_eye</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">右眼</td></tr><tr><td style=\"text-align:left\">+++nose</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">鼻子</td></tr><tr><td style=\"text-align:left\">+++mouth</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">嘴</td></tr><tr><td style=\"text-align:left\">+++left_cheek</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">左脸颊</td></tr><tr><td style=\"text-align:left\">+++right_cheek</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">右脸颊</td></tr><tr><td style=\"text-align:left\">+++chin</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">下巴</td></tr><tr><td style=\"text-align:left\">++type</td><td style=\"text-align:left\">object</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">真实人脸/卡通人脸置信度</td></tr><tr><td style=\"text-align:left\">+++human</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">真实人脸置信度，[0, 1]</td></tr><tr><td style=\"text-align:left\">+++cartoon</td><td style=\"text-align:left\">double</td><td style=\"text-align:left\">是</td><td style=\"text-align:left\">卡通人脸置信度，[0, 1]</td></tr></tbody></table><h2 id=\"c7b32af0\">人脸比对</h2><p>###接口描述</p><p>该请求用于比对多张图片中的人脸相似度并返回两两比对的得分，可用于判断两张脸是否是同一人的可能性大小。</p><p>典型应用场景：如<strong>人证合一验证</strong>，<strong>用户认证</strong>等，可与您现有的人脸库进行比对验证。</p><blockquote><p><strong>说明：</strong>支持对比对的两张图片做在线活体检测</p></blockquote><p>###请求说明</p><p>接受的参数为一系列本地图片路径的数组，或图片二进制数据的数组。 举例，要对两张图片进行人脸比对，具体的人脸信息在返回的result字段中：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> faceRecognize(AipFace client) {\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> imagePath1 = <span class=\"hljs-string\">\"test1.jpg\"</span>;\n    <span class=\"hljs-keyword\">String</span> imagePath2 = <span class=\"hljs-string\">\"test2.jpg\"</span>;\n    ArrayList&lt;<span class=\"hljs-keyword\">String</span>&gt; pathArray = <span class=\"hljs-keyword\">new</span> ArrayList&lt;<span class=\"hljs-keyword\">String</span>&gt;();\n    pathArray.<span class=\"hljs-built_in\">add</span>(imagePath1);\n    pathArray.<span class=\"hljs-built_in\">add</span>(imagePath2);\n    <span class=\"hljs-keyword\">JSONObject</span> response = client.<span class=\"hljs-built_in\">match</span>(pathArray, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;());\n    System.out.<span class=\"hljs-built_in\">println</span>(response.toString());\n}</code>\n</pre><p><strong>人脸比对请求参数</strong>：</p><p>所有图片经base64编码后的图片数据总和不超过10M。以下可选参数以HashMap形式放在接口最后的options参数中。</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>ext_fields</td><td>否</td><td>string</td><td>返回质量信息，取值固定: 目前支持qualities(质量检测)。(对所有图片都会做改处理)</td></tr><tr><td>image_liveness</td><td>否</td><td>string</td><td>返回的活体信息，“faceliveness,faceliveness” 表示对比对的两张图片都做活体检测；“,faceliveness” 表示对第一张图片不做活体检测、第二张图做活体检测；“faceliveness,” 表示对第一张图片做活体检测、第二张图不做活体检测</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求唯一标识码，随机数</td></tr><tr><td>result_num</td><td>是</td><td>uint32</td><td>返回结果数目，即：result数组中元素个数</td></tr><tr><td>result</td><td>是</td><td>array(object)</td><td>结果数据，index和请求图片index对应。数组元素为每张图片的匹配得分数组，top n。 得分[0,100.0]</td></tr><tr><td>+index_i</td><td>是</td><td>uint32</td><td>比对图片1的index</td></tr><tr><td>+index_j</td><td>是</td><td>uint32</td><td>比对图片2的index</td></tr><tr><td>+score</td><td>是</td><td>double</td><td>比对得分</td></tr><tr><td>ext_info</td><td>否</td><td>array（dict）</td><td>对应参数中的ext_fields</td></tr><tr><td>+qualities</td><td>否</td><td>string</td><td>质量相关的信息，无特殊需求可以不使用</td></tr><tr><td>+faceliveness</td><td>否</td><td>string</td><td>活体分数“0,0.9999”（表示第一个图不做活体检测、第二个图片活体分数为0.9999）</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\">//请求为四张图片，第三张解析失败\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">73473737</span>,\n    <span class=\"hljs-string\">\"result_num\"</span>:<span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-string\">\"result\"</span>: [\n        {\n            <span class=\"hljs-string\">\"index_i\"</span>: <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-string\">\"index_j\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"score\"</span>: <span class=\"hljs-number\">44.3</span>\n        },\n        {\n            <span class=\"hljs-string\">\"index_i\"</span>: <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-string\">\"index_j\"</span>: <span class=\"hljs-number\">3</span>,\n            <span class=\"hljs-string\">\"score\"</span>: <span class=\"hljs-number\">89.2</span>\n        },\n        {\n            <span class=\"hljs-string\">\"index_i\"</span>: <span class=\"hljs-number\">1</span>,\n            <span class=\"hljs-string\">\"index_j\"</span>: <span class=\"hljs-number\">3</span>,\n            <span class=\"hljs-string\">\"score\"</span>: <span class=\"hljs-number\">10.4</span>\n        }\n        ……\n    ]\n}</code>\n</pre><h2 id=\"e51f3c5f\">人脸识别</h2><h3>接口描述</h3><p>用于计算指定组内用户，与上传图像中人脸的相似度。识别前提为您已经创建了一个<strong><a href=\"#%E4%BA%BA%E8%84%B8%E6%B3%A8%E5%86%8C\" target=\"_blank\">人脸库</a></strong>。</p><p>典型应用场景：如<strong>人脸闸机</strong>，<strong>考勤签到</strong>，<strong>安防监控</strong>等。</p><blockquote><p><strong>说明：</strong>人脸识别返回值不直接判断是否是同一人，只返回用户信息及相似度分值。</p><p><strong>说明：</strong>推荐可判断为同一人的相似度分值为<strong>80</strong>，您也可以根据业务需求选择更合适的阈值。</p></blockquote><p>###请求说明</p><p>举例，要计算一张图片与指定组group1, group2内各用户相似度：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> identifyUser(AipFace client) {\n    <span class=\"hljs-keyword\">String</span> path = <span class=\"hljs-string\">\"test1.jpg\"</span>;\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt;(<span class=\"hljs-number\">1</span>);\n    options.put(<span class=\"hljs-string\">\"user_top_num\"</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.identifyUser(Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>, <span class=\"hljs-string\">\"group2\"</span>), path, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>人脸识别请求参数详情</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>group_id</td><td>是</td><td>string</td><td>用户组id（由数字、字母、下划线组成）列表，每个groupid长度限制48</td></tr><tr><td>imgPath/imgData</td><td>是</td><td>string</td><td>imgPath对应图片本地路径，imgData对应图片二进制数据，<strong>要求图片base64编码后大小不超过10M</strong></td></tr><tr><td>ext_fields</td><td>否</td><td>string</td><td>特殊返回信息，多个用逗号分隔，取值固定: 目前支持 faceliveness(活体检测)</td></tr><tr><td>user_top_num</td><td>否</td><td>uint32</td><td>返回用户top数，默认为1，最多返回5个</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求唯一标识码，随机数</td></tr><tr><td>result_num</td><td>是</td><td>uint32</td><td>返回结果数目，即：result数组中元素个数</td></tr><tr><td>ext_info</td><td>否</td><td>array</td><td>对应参数中的ext_fields</td></tr><tr><td>+faceliveness</td><td>否</td><td>string</td><td>活体分数，如0.49999</td></tr><tr><td>result</td><td>是</td><td>array(object)</td><td>结果数组</td></tr><tr><td>+group_id</td><td>是</td><td>string</td><td>对应的这个用户的group_id</td></tr><tr><td>+uid</td><td>是</td><td>string</td><td>匹配到的用户id</td></tr><tr><td>+user_info</td><td>是</td><td>string</td><td>注册时的用户信息</td></tr><tr><td>+scores</td><td>是</td><td>array(double)</td><td>结果数组，数组元素为匹配得分，top n。得分[0,100.0]</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\">{\n    <span class=\"hljs-attr\">\"log_id\"</span>: <span class=\"hljs-number\">73473737</span>,\n    <span class=\"hljs-attr\">\"result_num\"</span>:<span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">\"result\"</span>: [\n        {\n            <span class=\"hljs-attr\">\"group_id\"</span> : <span class=\"hljs-string\">\"test1\"</span>,\n            <span class=\"hljs-attr\">\"uid\"</span>: <span class=\"hljs-string\">\"u333333\"</span>,\n            <span class=\"hljs-attr\">\"user_info\"</span>: <span class=\"hljs-string\">\"Test User\"</span>,\n            <span class=\"hljs-attr\">\"scores\"</span>: [\n                    <span class=\"hljs-number\">99.3</span>,\n                    <span class=\"hljs-number\">83.4</span>\n            ]\n        }\n    ]\n}</code>\n</pre><h2 id=\"d22afc4e\">人脸认证</h2><h3>接口描述</h3><p>用于识别上传的图片是否为指定用户，即查找前需要先确定要查找的用户在人脸库中的id。</p><p>典型应用场景：如<strong>人脸登录</strong>，<strong>人脸签到</strong>等</p><blockquote><p><strong>说明：</strong>人脸认证与人脸识别的差别在于：人脸识别需要指定一个待查找的人脸库中的组；而人脸认证需要指定具体的用户id即可，不需要指定具体的人脸库中的组；实际应用中，人脸认证需要用户或系统先输入id，这增加了验证安全度，但也增加了复杂度，具体使用哪个接口需要视您的业务场景判断。</p><p><strong>说明：</strong>请求参数中，新增在线活体检测</p></blockquote><h3>请求说明</h3><p>举例，要认证一张图片在指定group中是否为uid1的用户：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> verifyUser(AipFace client) {\n    <span class=\"hljs-keyword\">String</span> path = <span class=\"hljs-string\">\"test1.jpg\"</span>;\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt;(<span class=\"hljs-number\">1</span>);\n    options.put(<span class=\"hljs-string\">\"top_num\"</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.verifyUser(<span class=\"hljs-string\">\"uid1\"</span>, Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>, <span class=\"hljs-string\">\"group2\"</span>), path, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>人脸认证请求参数详情</strong>： 可选参数均以HashMap形式放在接口最后的options参数中。</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>uid</td><td>是</td><td>string</td><td>用户id（由数字、字母、下划线组成），长度限制128B</td></tr><tr><td>imgPath/imgData</td><td>是</td><td>string</td><td>imgPath对应图片本地路径，imgData对应图片二进制数据，<strong>要求图片base64编码后大小不超过10M</strong></td></tr><tr><td>group_id</td><td>是</td><td>string</td><td>用户组id（由数字、字母、下划线组成）列表，每个groupid长度限制48</td></tr><tr><td>top_num</td><td>否</td><td>uint32</td><td>返回匹配得分top数，默认为1</td></tr><tr><td>ext_fields</td><td>否</td><td>string</td><td>特殊返回信息，多个用逗号分隔，取值固定: 目前支持 faceliveness(活体检测)</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求唯一标识码，随机数</td></tr><tr><td>result_num</td><td>是</td><td>uint32</td><td>返回结果数目，即：result数组中元素个数</td></tr><tr><td>result</td><td>是</td><td>array(double)</td><td>结果数组，数组元素为匹配得分，top n。 得分范围[0,100.0]。推荐得分超过80可认为认证成功</td></tr><tr><td>ext_info</td><td>否</td><td>array</td><td>对应参数中的ext_fields</td></tr><tr><td>+faceliveness</td><td>否</td><td>string</td><td>活体分数，如0.49999</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\">{\n  <span class=\"hljs-attr\">\"results\"</span>: [\n    <span class=\"hljs-number\">93.86580657959</span>,\n    <span class=\"hljs-number\">92.237548828125</span>\n  ],\n  <span class=\"hljs-attr\">\"result_num\"</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">\"log_id\"</span>: <span class=\"hljs-number\">1629483134</span>\n}</code>\n</pre><h2 id=\"ca2bad80\">人脸注册</h2><h3>接口描述</h3><p>用于从人脸库中新增用户，可以设定多个用户所在组，及组内用户的人脸图片，</p><p>典型应用场景：构建您的人脸库，如<strong>会员人脸注册</strong>，<strong>已有用户补全人脸信息</strong>等。</p><p>人脸库、用户组、用户、用户下的人脸<strong>层级关系</strong>如下所示：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-string\">|- 人脸库</span>\n   <span class=\"hljs-string\">|- 用户组一</span>\n      <span class=\"hljs-string\">|- 用户01</span>\n         <span class=\"hljs-string\">|- 人脸</span>\n      <span class=\"hljs-string\">|- 用户02</span>\n         <span class=\"hljs-string\">|- 人脸</span>\n         <span class=\"hljs-string\">|- 人脸</span>\n         ....\n       ....\n   <span class=\"hljs-string\">|- 用户组二</span>\n   <span class=\"hljs-string\">|- 用户组三</span>\n   <span class=\"hljs-string\">|- 用户组四</span>\n   ....</code>\n</pre><p><strong>说明：关于人脸库的设置限制</strong></p><ul><li>每个开发者账号只能创建一个人脸库；</li><li>每个人脸库下，用户组（group）数量没有限制；</li><li>每个用户组（group）下，可添加最多<strong>300000</strong>张人脸，如每个uid注册一张人脸，则<strong>最多300000个</strong>用户uid；</li><li>每个用户（uid）所能注册的最大人脸数量<strong>没有限制</strong>；</li></ul><blockquote><p><strong>说明：</strong>人脸注册完毕后，生效时间最长为<strong>35s</strong>，之后便可以进行识别或认证操作。</p><p><strong>说明：</strong>注册的人脸，建议为用户正面人脸。</p><p><strong>说明：</strong>uid在库中已经存在时，对此uid重复注册时，新注册的图片默认会<strong>追加</strong>到该uid下，如果手动选择<code><span class=\"hljs-symbol\">action_type:</span>replace</code>，则会用新图替换库中该uid下所有图片。</p></blockquote><p>###请求说明</p><p>举例，要注册一个新用户，用户id为uid1，加入组id为group1和group2, 注册成功后服务端会返回操作的logid：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> facesetAddUser(AipFace client) {\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> path = <span class=\"hljs-string\">\"picture1.jpg\"</span>;\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;();\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.addUser(<span class=\"hljs-string\">\"uid1\"</span>, <span class=\"hljs-string\">\"test_user_info\"</span>, Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>, <span class=\"hljs-string\">\"group2\"</span>), path, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>人脸注册请求参数详情</strong>：</p><p>可选参数均以HashMap形式放在接口最后的options参数中。 | 参数 | 是否必选 | 类型 | 说明 | | ----------- | ---- | ------ | ---------------------------------------- | | uid | 是 | string | 用户id（由数字、字母、下划线组成），长度限制128B | | user_info | 是 | string | 用户资料，长度限制256B | | imgPath/imgData| 是 | string | imgPath对应图片本地路径，imgData对应图片二进制数据，<strong>要求图片base64编码后大小不超过10M</strong> | | group_id | 是 | string | 用户组id（由数字、字母、下划线组成）列表，每个groupid长度限制48 | | action_type | 否 | string | 参数包含append、replace。如果为“replace”，则每次注册时进行替换replace（新增或更新）操作，默认为append操作 |</p><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 注册成功</span>\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">73473737</span>,\n}\n<span class=\"hljs-comment\">// 注册发生错误</span>\n{\n  <span class=\"hljs-string\">\"error_code\"</span>: <span class=\"hljs-number\">216616</span>,\n  <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">674786177</span>,\n  <span class=\"hljs-string\">\"error_msg\"</span>: <span class=\"hljs-string\">\"image exist\"</span>\n}</code>\n</pre><h2 id=\"97be2386\">人脸更新</h2><h3>接口描述</h3><p>用于对人脸库中指定用户，更新其下的人脸图像。</p><blockquote><p><strong>说明：</strong>针对一个uid执行更新操作，新上传的人脸图像将覆盖此uid原有所有图像。</p><p><strong>说明：</strong>执行更新操作，如果该uid不存在时，会返回错误。如果添加了action_type:replace,则不会报错，并自动注册该uid，操作结果等同注册新用户。</p></blockquote><h3>请求说明</h3><p>举例，要更新一个用户，用户id为uid1， 更新成功后服务端会返回操作的logid：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> facesetUpdateUser(AipFace client) {\n    <span class=\"hljs-comment\">// 参数为本地图片路径</span>\n    <span class=\"hljs-keyword\">String</span> path = <span class=\"hljs-string\">\"picture1.jpg\"</span>;\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">String</span>&gt;();\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.updateUser(<span class=\"hljs-string\">\"uid1\"</span>, <span class=\"hljs-string\">\"user_info_memo\"</span>, <span class=\"hljs-string\">\"group1\"</span>, path, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>人脸更新请求参数详情</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>uid</td><td>是</td><td>string</td><td>用户id（由数字、字母、下划线组成），长度限制128B</td></tr><tr><td>imgPath/imgData</td><td>是</td><td>string</td><td>imgPath对应图片本地路径，imgData对应图片二进制数据，<strong>要求图片base64编码后大小不超过10M</strong></td></tr><tr><td>group_id</td><td>是</td><td>string</td><td>用户组id（由数字、字母、下划线组成），长度限制48</td></tr><tr><td>user_info</td><td>是</td><td>string</td><td>新的user_info信息</td><td>&quot;memo&quot;</td></tr><tr><td>action_type</td><td>否</td><td>string</td><td>如果为replace时，则uid不存在时，不报错，会自动注册。 不存在该参数时，如果uid不存在会提示错误</td><td>replace</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 更新成功</span>\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">73473737</span>,\n}\n<span class=\"hljs-comment\">// 更新发生错误</span>\n{\n  <span class=\"hljs-string\">\"error_code\"</span>: <span class=\"hljs-number\">216612</span>,\n  <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">1137508902</span>,\n  <span class=\"hljs-string\">\"error_msg\"</span>: <span class=\"hljs-string\">\"user not exist\"</span>\n}</code>\n</pre><h2 id=\"6995c763\">人脸删除</h2><h3>接口描述</h3><p>用于从人脸库中删除一个用户。</p><p><strong>人脸删除注意事项：</strong></p><ul><li>删除的内容，包括用户所有图像和身份信息；</li><li>如果一个uid存在于多个用户组内且没有指定group_id，将会同时将从各个组中把用户删除</li><li>如果指定了group_id，则只删除此group下的uid相关信息</li></ul><h3>请求说明</h3><p>举例，要删除一个用户，用户id为uid1， 删除成功后服务端会返回操作的logid：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> facesetDeleteUser(AipFace client) {\n    <span class=\"hljs-comment\">// 只从指定组中删除用户</span>\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.deleteUser(<span class=\"hljs-string\">\"uid1\"</span>, Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>));\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n\n    <span class=\"hljs-comment\">// 从人脸库中彻底删除用户</span>\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.deleteUser(<span class=\"hljs-string\">\"uid1\"</span>);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>人脸删除请求参数</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>uid</td><td>是</td><td>string</td><td>用户id（由数字、字母、下划线组成），长度限制128B</td></tr><tr><td>group_id</td><td>否</td><td>string</td><td>选择指定group_id则只删除group列表下的uid内容，如果不指定则删除group下对应uid的信息</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 更新成功</span>\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">73473737</span>,\n}\n<span class=\"hljs-comment\">// 更新发生错误</span>\n{\n  <span class=\"hljs-string\">\"error_code\"</span>: <span class=\"hljs-number\">216612</span>,\n  <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">1137508902</span>,\n  <span class=\"hljs-string\">\"error_msg\"</span>: <span class=\"hljs-string\">\"user not exist\"</span>\n}</code>\n</pre><h2 id=\"34de3cab\">用户信息查询</h2><h3>接口描述</h3><p>用于查询人脸库中某用户的详细信息。</p><h3>请求说明</h3><p>举例，要查询指定用户的信息：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> getUser(AipFace client) {\n    <span class=\"hljs-comment\">// 查询一个用户在所有组内的信息</span>\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.getUser(<span class=\"hljs-string\">\"uid1\"</span>);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n\n    <span class=\"hljs-comment\">// 查询一个用户在指定组内的信息</span>\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.getUser(<span class=\"hljs-string\">\"uid1\"</span>, Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>));\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>用户信息查询请求参数</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>uid</td><td>是</td><td>string</td><td>用户id（由数字、字母、下划线组成），长度限制128B</td></tr><tr><td>group_id</td><td>否</td><td>string</td><td>选择指定group_id则只查找group列表下的uid内容，如果不指定则查找所有group下对应uid的信息</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr><tr><td>result</td><td>是</td><td>array(double)</td><td>结果数组</td></tr><tr><td>+uid</td><td>是</td><td>string</td><td>匹配到的用户id</td></tr><tr><td>+user_info</td><td>是</td><td>string</td><td>注册时的用户信息</td></tr><tr><td>+groups</td><td>是</td><td>array(string)</td><td>用户所属组列表</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\">{\n    <span class=\"hljs-attr\">\"result\"</span>: {\n        <span class=\"hljs-attr\">\"uid\"</span>: <span class=\"hljs-string\">\"testuser2\"</span>,\n        <span class=\"hljs-attr\">\"user_info\"</span>: <span class=\"hljs-string\">\"registed user info ...\"</span>,\n        <span class=\"hljs-attr\">\"groups\"</span>: [\n            <span class=\"hljs-string\">\"grp1\"</span>,\n            <span class=\"hljs-string\">\"grp2\"</span>,\n            <span class=\"hljs-string\">\"grp3\"</span>\n        ]\n    },\n    <span class=\"hljs-attr\">\"log_id\"</span>: <span class=\"hljs-number\">2979357502</span>\n}</code>\n</pre><h2 id=\"4b9dad1b\">组列表查询</h2><h3>接口描述</h3><p>用于查询用户组的列表。</p><h3>请求说明</h3><p>举例：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> getGroupList(AipFace client) {\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt;(<span class=\"hljs-number\">2</span>);\n    options.put(<span class=\"hljs-string\">\"start\"</span>, <span class=\"hljs-number\">0</span>);\n    options.put(<span class=\"hljs-string\">\"num\"</span>, <span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.getGroupList(options);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>组列表查询请求参数详情</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>start</td><td>否</td><td>uint32</td><td>默认值0，起始序号</td></tr><tr><td>end</td><td>否</td><td>uint32</td><td>返回数量，默认值100，最大值1000</td></tr></tbody></table><p>###返回说明 | 字段 | 是否必选 | 类型 | 说明 | | ---------- | ---- | ------------- | ------------ | | log_id | 是 | uint64 | 请求标识码，随机数，唯一 | | result_num | 是 | uint32 | 返回个数 | | result | 是 | array(string) | group_id列表 |</p><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\">{\n    <span class=\"hljs-attr\">\"result_num\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">\"result\"</span>: [\n        <span class=\"hljs-string\">\"grp1\"</span>,\n        <span class=\"hljs-string\">\"grp2\"</span>\n    ],\n    <span class=\"hljs-attr\">\"log_id\"</span>: <span class=\"hljs-number\">3314921889</span>\n}</code>\n</pre><h2 id=\"c8d3c82e\">组内用户列表查询</h2><h3>接口描述</h3><p>用于查询指定用户组中的用户列表。</p><h3>请求说明</h3><p>举例：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> getGroupUsers(AipFace client) {\n    <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt; options = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">HashMap</span>&lt;<span class=\"hljs-keyword\">String</span>, <span class=\"hljs-keyword\">Object</span>&gt;(<span class=\"hljs-number\">2</span>);\n    options.put(<span class=\"hljs-string\">\"start\"</span>, <span class=\"hljs-number\">0</span>);\n    options.put(<span class=\"hljs-string\">\"num\"</span>, <span class=\"hljs-number\">10</span>);\n    <span class=\"hljs-keyword\">JSONObject</span> res = client.getGroupUsers(<span class=\"hljs-string\">\"group1\"</span>, options);\n    System.out.<span class=\"hljs-built_in\">println</span>(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>组内用户列表查询请求参数详情</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>group_id</td><td>是</td><td>string</td><td>用户组id</td></tr><tr><td>start</td><td>否</td><td>uint32</td><td>默认值0，起始序号</td></tr><tr><td>end</td><td>否</td><td>uint32</td><td>返回数量，默认值100，最大值1000</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr><tr><td>result_num</td><td>是</td><td>uint32</td><td>返回个数</td></tr><tr><td>result</td><td>是</td><td>array(object)</td><td>user列表</td></tr><tr><td>+uid</td><td>是</td><td>string</td><td>用户id</td></tr><tr><td>+user_info</td><td>是</td><td>string</td><td>用户信息</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\">{\n    <span class=\"hljs-attr\">\"log_id\"</span>: <span class=\"hljs-number\">3314921889</span>,\n    <span class=\"hljs-attr\">\"result_num\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">\"result\"</span>: [\n        {\n            <span class=\"hljs-attr\">\"uid\"</span>: <span class=\"hljs-string\">\"uid1\"</span>,\n            <span class=\"hljs-attr\">\"user_info\"</span>: <span class=\"hljs-string\">\"user info 1\"</span>\n        },\n        {\n            <span class=\"hljs-attr\">\"uid\"</span>: <span class=\"hljs-string\">\"uid2\"</span>,\n            <span class=\"hljs-attr\">\"user_info\"</span>: <span class=\"hljs-string\">\"user info 2\"</span>\n        }\n    ]\n}</code>\n</pre><h2 id=\"1c0d4eb0\">组内添加用户</h2><h3>接口描述</h3><p>用于将已经存在于人脸库中的用户添加到一个新的组。</p><blockquote><p><strong>说明：</strong>并不是向一个指定组内添加用户，而是直接从其它组复制用户信息</p></blockquote><h3>请求说明</h3><p>举例：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> addGroupUser(AipFace <span class=\"hljs-keyword\">client</span>) {\n    JSONObject res = <span class=\"hljs-keyword\">client</span>.addGroupUser(<span class=\"hljs-string\">\"srcgroup\"</span>, Arrays.asList(<span class=\"hljs-string\">\"dstGroup1\"</span>, <span class=\"hljs-string\">\"dstGroup2\"</span>), <span class=\"hljs-string\">\"uid1\"</span>);\n    System.out.println(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>组内添加用户请求参数详情</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>src_group_id</td><td>是</td><td>string</td><td>从指定group里复制信息</td></tr><tr><td>group_id</td><td>是</td><td>string</td><td>需要添加信息的组id列表</td></tr><tr><td>uid</td><td>是</td><td>string</td><td>用户id</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 正确返回值 </span>\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">3314921889</span>,\n}\n<span class=\"hljs-comment\">// 发生错误时返回值 </span>\n{\n  <span class=\"hljs-string\">\"error_code\"</span>: <span class=\"hljs-number\">216100</span>,\n  <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">3111284097</span>,\n  <span class=\"hljs-string\">\"error_msg\"</span>: <span class=\"hljs-string\">\"already add\"</span>\n}</code>\n</pre><h2 id=\"70e48a5c\">组内删除用户</h2><h3>接口描述</h3><p>用于将用户从某个组中删除，但不会删除用户在其它组的信息。</p><blockquote><p><strong>说明：</strong>当用户仅属于单个分组时，本接口将返回错误，请使用<strong>人脸删除接口</strong></p></blockquote><h3>请求说明</h3><p>举例：</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> deleteGroupUser(AipFace <span class=\"hljs-keyword\">client</span>) {\n    JSONObject res = <span class=\"hljs-keyword\">client</span>.deleteGroupUser(Arrays.asList(<span class=\"hljs-string\">\"group1\"</span>, <span class=\"hljs-string\">\"group2\"</span>), <span class=\"hljs-string\">\"uid1\"</span>);\n    System.out.println(res.toString(<span class=\"hljs-number\">2</span>));\n}</code>\n</pre><p><strong>组内删除用户请求参数详情</strong>：</p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>group_id</td><td>是</td><td>string</td><td>用户组id列表</td></tr><tr><td>uid</td><td>是</td><td>string</td><td>用户id</td></tr></tbody></table><p>###返回说明</p><table><thead><tr><th>字段</th><th>是否必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>log_id</td><td>是</td><td>uint64</td><td>请求标识码，随机数，唯一</td></tr></tbody></table><p><strong>返回样例：</strong></p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 正确返回值 </span>\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">3314921889</span>,\n}\n<span class=\"hljs-comment\">// 发生错误时返回值 </span>\n{\n  <span class=\"hljs-string\">\"error_code\"</span>: <span class=\"hljs-number\">216619</span>,\n  <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">815967402</span>,\n  <span class=\"hljs-string\">\"error_msg\"</span>: <span class=\"hljs-string\">\"user must be in one group at least\"</span>\n}</code>\n</pre><h1 id=\"0243f25e\">错误信息</h1><p>##错误返回格式</p><p>若请求错误，服务器将返回的JSON文本包含以下参数：</p><ul><li><strong>error_code：</strong>错误码；关于错误码的详细信息请参考<strong>通用错误码</strong>和<strong>业务相关错误码</strong>。</li><li><strong>error_msg：</strong>错误描述信息，帮助理解和解决发生的错误。</li></ul><p>##错误码 <strong>SDK本地检测参数返回的错误码</strong>：</p><table><thead><tr><th>error_code</th><th>error_msg</th><th>备注</th></tr></thead><tbody><tr><td>SDK100</td><td>image size error</td><td>图片大小超限</td></tr><tr><td>SDK101</td><td>image length error</td><td>图片边长不符合要求</td></tr><tr><td>SDK102</td><td>read image file error</td><td>读取图片文件错误</td></tr><tr><td>SDK103</td><td>user_info size error</td><td>user_info参数大小错误</td></tr><tr><td>SDK104</td><td>group_id format error</td><td>group_id有非法字符</td></tr><tr><td>SDK105</td><td>group_id size error</td><td>group_id参数大小错误</td></tr><tr><td>SDK106</td><td>uid format error</td><td>uid有非法字符</td></tr><tr><td>SDK107</td><td>uid size error</td><td>uid参数大小错误</td></tr><tr><td>SDK108</td><td>connection or read data time out</td><td>连接超时或读取数据超时</td></tr><tr><td>SDK109</td><td>unsupported image format</td><td>不支持的图片格式</td></tr></tbody></table><p><strong>服务端返回的错误码</strong></p><table><thead><tr><th>错误码</th><th>错误信息</th><th>描述</th></tr></thead><tbody><tr><td>216015</td><td>module closed</td><td>模块关闭</td></tr><tr><td>216100</td><td>invalid param</td><td>非法参数</td></tr><tr><td>216101</td><td>not enough param</td><td>参数数量不够</td></tr><tr><td>216102</td><td>service not support</td><td>业务不支持</td></tr><tr><td>216103</td><td>param too long</td><td>参数太长</td></tr><tr><td>216110</td><td>appid not exist</td><td>APP ID不存在</td></tr><tr><td>216111</td><td>invalid userid</td><td>非法用户ID</td></tr><tr><td>216200</td><td>empty image</td><td>空的图片</td></tr><tr><td>216201</td><td>image format error</td><td>图片格式错误</td></tr><tr><td>216202</td><td>image size error</td><td>图片大小错误</td></tr><tr><td>216300</td><td>db error</td><td>DB错误</td></tr><tr><td>216400</td><td>backend error</td><td>后端系统错误</td></tr><tr><td>216401</td><td>internal error</td><td>内部错误</td></tr><tr><td>216402</td><td>face not found</td><td>没有找到人脸</td></tr><tr><td>216500</td><td>unknown error</td><td>未知错误</td></tr><tr><td>216611</td><td>user not exist</td><td>用户不存在</td></tr><tr><td>216613</td><td>user not found</td><td>用户查找不到</td></tr><tr><td>216614</td><td>not enough images</td><td>图片信息不完整</td></tr><tr><td>216615</td><td>fail to process images</td><td>处理图片信息失败</td></tr><tr><td>216616</td><td>image existed</td><td>图片已存在</td></tr><tr><td>216617</td><td>fail to add user</td><td>添加用户失败</td></tr><tr><td>216618</td><td>no user in group</td><td>群组里没有用户</td></tr><tr><td>216630</td><td>recognize error</td><td>识别错误</td></tr></tbody></table>",
  "headings": [
    {
      "level": 1,
      "text": "Java SDK文档",
      "id": "04005fec"
    },
    {
      "level": 1,
      "text": "简介",
      "id": "5ea2115a"
    },
    {
      "level": 2,
      "text": "接口能力",
      "id": "7e79d55d"
    },
    {
      "level": 2,
      "text": "版本更新记录",
      "id": "c2320935"
    },
    {
      "level": 2,
      "text": "安装人脸检测 Java SDK",
      "id": "ab87a30a"
    },
    {
      "level": 2,
      "text": "新建AipFaceClient",
      "id": "fa116362"
    },
    {
      "level": 2,
      "text": "配置AipFaceClient",
      "id": "4d749445"
    },
    {
      "level": 2,
      "text": "人脸检测",
      "id": "a1e0679a"
    },
    {
      "level": 2,
      "text": "人脸比对",
      "id": "c7b32af0"
    },
    {
      "level": 2,
      "text": "人脸识别",
      "id": "e51f3c5f"
    },
    {
      "level": 2,
      "text": "人脸认证",
      "id": "d22afc4e"
    },
    {
      "level": 2,
      "text": "人脸注册",
      "id": "ca2bad80"
    },
    {
      "level": 2,
      "text": "人脸更新",
      "id": "97be2386"
    },
    {
      "level": 2,
      "text": "人脸删除",
      "id": "6995c763"
    },
    {
      "level": 2,
      "text": "用户信息查询",
      "id": "34de3cab"
    },
    {
      "level": 2,
      "text": "组列表查询",
      "id": "4b9dad1b"
    },
    {
      "level": 2,
      "text": "组内用户列表查询",
      "id": "c8d3c82e"
    },
    {
      "level": 2,
      "text": "组内添加用户",
      "id": "1c0d4eb0"
    },
    {
      "level": 2,
      "text": "组内删除用户",
      "id": "70e48a5c"
    },
    {
      "level": 1,
      "text": "错误信息",
      "id": "0243f25e"
    }
  ]
}
