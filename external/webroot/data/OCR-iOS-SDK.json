{
  "html": "<h1 id=\"25de006b\">OCR iOS SDK 开发者文档</h1><p>本文档主要介绍OCR iOS SDK的安装和使用。在使用本文档前，您需要先了解Optical Character Recognition(OCR)的基础知识，并已经开通了OCR服务。</p><p>支持的系统和硬件版本</p><ul><li>iOS: 8.0 以上</li><li>架构：armv7, armv7s, arm64</li></ul><h1 id=\"54f1e662\">快速入门</h1><h2 id=\"00d7eaf1\">SDK工程结构</h2><pre>\n<code class=\"hljs\" lang=\"\">AipOcrSdk                            <span class=\"hljs-comment\">// OCR Framework 工程，包含相机相关操作</span>\n    <span class=\"hljs-string\">|-AipBase.framework                    // 身份验证、OCR基础操作框架包</span>\n    <span class=\"hljs-string\">|-AipOcrSdk</span>\n        <span class=\"hljs-string\">|-IOSpeScaleLayout...</span>\n        <span class=\"hljs-string\">|-AipOcrService.h/m                // OCR服务包装类</span>\n        <span class=\"hljs-string\">|-AipOcrResultDelegate.h/m</span>\n        <span class=\"hljs-string\">|-View                         // 界面相关类</span>\n        <span class=\"hljs-string\">|-ViewController</span>\n    <span class=\"hljs-string\">|-AipOcrBundle</span>\nAipOcrDemo                            <span class=\"hljs-comment\">// Demo 工程</span>\n    <span class=\"hljs-string\">|-AipOcrDemo</span></code>\n</pre><p>AipOcrDemo工程依赖了AipOcrSdk工程以及AipBase.framework框架。（Dynamic框架，请使用Embed Binary方式嵌入）</p><p>其中</p><ul><li>AipBase.framework中包含了OCR服务相关基础类，必须引入。</li><li>AipOcrSdk工程包含了相机相关操作，如果需要相机接口，需要引入<ul><li>如果只需直接调用相机接口，直接引入AipOcrSdk工程生成的AipOcrSdk.framework即可。</li><li>如果需要修改相机界面和和逻辑，可像demo工程一样引入AipOcrSdk工程，添加为依赖。</li></ul></li></ul><h2 id=\"eb925662\">Demo工程</h2><p>iOS SDK提供了一个可快速运行的Demo工程，建议首先运行一下Demo工程，其中包含了使用SDK的主要步骤。</p><p>运行步骤如下：</p><ol><li>在<a href=\"http://ai.baidu.com/sdk\" target=\"_blank\">官网</a>下载iOS SDK 压缩包</li><li>解压缩，双击打开 AipOcr.xcworkspace</li><li>在<a href=\"https://console.bce.baidu.com/ai/?fromai=1#/ai/ocr/app/list\" target=\"_blank\">管理控制台</a>中新建文字识别应用，配置BundleId为AipOcrDemo的BunldeId(默认为<code>com<span class=\"hljs-selector-class\">.baidu</span><span class=\"hljs-selector-class\">.AipOcrDemo</span></code>)</li><li>在AipOcrDemo工程中<code>AipOcrDemo/ViewController.<span class=\"hljs-built_in\">m</span></code> <code><span class=\"hljs-attribute\">viewDidLoad</span></code>方法中配置相应<a href=\"https://console.bce.baidu.com/ai/?fromai=1#/ai/ocr/app/list\" target=\"_blank\">管理控制台</a>中新建的应用的Api Key, Secret Key</li><li>运行AipOcrDemo工程</li></ol><p><strong>若运行提示&quot;身份验证错误&quot;，请确认填写了步骤4中的Api Key/Secret Key</strong></p><h2 id=\"bd47d80a\">身份验证与安全</h2><p>百度AIP开放平台使用OAuth2.0授权调用开放API，调用API时必须在URL中带上accesss_token参数。AccessToken可用AK/SK或者授权文件的方式获得。</p><p>OCR iOS SDK提供了以下3种AccessToken管理方法.</p><h3>API Key / Secret Key</h3><p>此种身份验证方案使用AK/SK获得AccessToken，缓存在本地。</p><p>虽然SDK对网络传输的敏感数据进行了二次加密，但由于AK/SK是明文填写在代码中，在移动设备中可能会存在AK/SK被盗取的风险。有安全考虑的开发者可使用第二种授权方案。</p><p>使用步骤：</p><ol><li>在<a href=\"https://console.bce.baidu.com/ai/?fromai=1&amp;_=1488766023093#/ai/ocr/app/list\" target=\"_blank\">管理控制台</a>中配置OCR应用</li><li>复制应用的Api Key（简称AK） 和 Secret Key（简称SK），初始化<code><span class=\"hljs-attribute\">AipOcrService</span></code>单例：</li></ol><pre>\n<code class=\"hljs\" lang=\"\">// 接口\n- (instance<span class=\"hljs-keyword\">type</span>) authWithAK: (<span class=\"hljs-type\">NSString</span> *)ak andSK: (<span class=\"hljs-type\">NSString</span> *)sk;\n// 示例\n[[<span class=\"hljs-type\">AipOcrService</span> shardService] authWithAK:@<span class=\"hljs-string\">\"Api Key\"</span> andSK:@<span class=\"hljs-string\">\"Secret Key\"</span>];</code>\n</pre><h3>授权文件（安全模式）</h3><p>此种身份验证方案使用授权文件获得AccessToken，缓存在本地。<strong><em>建议有安全考虑的开发者使用此种身份验证方式。</em></strong></p><p>在您的移动APP分发出去之后，APP存在被反编译的可能，所以直接将AK / SK 置于APP源码之中，存在被盗取的风险。采用授权文件的身份验证方法，可有效保护AK/SK在移动设备中的安全。攻击者即使拦截了流量，盗取了授权文件，也难以盗用您的配额。</p><p>使用步骤：</p><ol><li>在<a href=\"https://console.bce.baidu.com/ai/?fromai=1&amp;_=1488766023093#/ai/ocr/app/list\" target=\"_blank\">官网</a>中配置应用</li><li>下载对应应用的授权文件（默认名字为aip.license）</li><li>将授权文件添加至XCode工程（配置为资源并拷贝，Target -&gt; Build Phases -&gt; Copy Bundle Resource 中添加该文件）</li><li>读取授权文件原始字节，<code><span class=\"hljs-attribute\">NSData</span></code>格式，初始化<code><span class=\"hljs-attribute\">AipOcrService</span></code>单例：</li></ol><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 接口</span>\n- (<span class=\"hljs-keyword\">instancetype</span>) authWithLicenseFileData: (<span class=\"hljs-built_in\">NSData</span> *)licenseFileContent;\n\n<span class=\"hljs-comment\">// 示例</span>\n<span class=\"hljs-comment\">// 若未添加至主工程，则[NSBundle mainBundle]修改为对应bundle</span>\n<span class=\"hljs-built_in\">NSString</span> *licenseFile = [[<span class=\"hljs-built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"hljs-string\">@\"aip\"</span> ofType:<span class=\"hljs-string\">@\"license\"</span>]; \n<span class=\"hljs-built_in\">NSData</span> *licenseFileData = [<span class=\"hljs-built_in\">NSData</span> dataWithContentsOfFile:licenseFile];\n[[AipOcrService shardService] authWithLicenseFileData:licenseFileData];</code>\n</pre><h3>自助AccessToken管理</h3><p>此种身份验证方案直接使用开发者提供的AccessToken，不做缓存。</p><p>若开发者的应用有自行搭建的服务端，也可在自己的服务端进行token的获取与管理，然后分配给移动客户端使用。Token的获得可以参考<a href=\"http://ai.baidu.com/docs#Beginner-Auth\" target=\"_blank\">API鉴权认证机制</a>。此种授权方案在移动客户端上没有任何AK/SK信息，风险系数低，但需要开发者自行管理Token的获取与分配，适合有条件的开发者使用。</p><p>使用步骤：</p><ol><li>将您需要使用的token传入对应的构造函数，初始化<code><span class=\"hljs-attribute\">AipOcrService</span></code>单例：</li></ol><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 接口</span>\n- (instancetype) authWithToken: (NSString *)token;\n<span class=\"hljs-comment\">// 示例</span>\n<span class=\"hljs-selector-attr\">[[AipOcrService shardService]</span> authWithToken:@<span class=\"hljs-string\">\"Token here\"</span>];</code>\n</pre><p>注意：此种方式下，SDK不再缓存token，开发者需自行处理token过期问题。</p><h1 id=\"e9262c91\">SDK集成与接口调用</h1><p>使用SDK时，需要将AipBase.framework和AipOcrSdk.framework嵌入工程（Embed Binary方式，可参考AipOcrDemo工程）,并导入相关头文件<code>&amp;<span class=\"hljs-keyword\">lt</span>;AipOcrSdk/AipOcrSdk.h&amp;<span class=\"hljs-keyword\">gt</span>;</code>。</p><p>在调用接口前，请确认已经进行过身份验证。见<a href=\"#%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E5%AE%89%E5%85%A8\" target=\"_blank\">身份验证与安全</a>。</p><h2 id=\"903974e4\">相机接口</h2><p>该调用方法将会自动打开相机，用户拍照、确认，完成识别之后, 使用delegate直接返回识别结果。</p><p>内部使用了<code>[AipOcrService shardService]</code>进行数据调用。</p><p>具体返回格式见 <a href=\"#%E6%95%B0%E6%8D%AE%E6%8E%A5%E5%8F%A3\" target=\"_blank\">数据接口</a></p><p>操作步骤：</p><ol><li>身份验证：调用 <code><span class=\"hljs-selector-attr\">[[AipOcrService shardService]</span> <span class=\"hljs-selector-tag\">authWithAK</span><span class=\"hljs-selector-pseudo\">:SK</span></code> 或其他验证方法；</li><li>在需要回调的类中实现AipOcrDelegate的接口（按需实现即可）。可在这些方法中pop出OCR的View,具体参考Demo工程。<ul><li>通用文字识别成功：<code>- (void) ocrOnGeneralSuccessful:(<span class=\"hljs-built_in\">id</span>)<span class=\"hljs-literal\">result</span></code></li><li>银行卡识别成功：<code>- (void) ocrOnBankCardSuccessful:(<span class=\"hljs-built_in\">id</span>)<span class=\"hljs-literal\">result</span></code></li><li>身份证识别成功：<code>- (void) ocrOnIdCardSuccessful:(<span class=\"hljs-built_in\">id</span>)<span class=\"hljs-literal\">result</span></code></li><li>识别失败：<code>- (<span class=\"hljs-keyword\">void</span>) ocrOnFail:(NSError *)<span class=\"hljs-keyword\">error</span></code></li></ul></li><li>在工程<code><span class=\"hljs-keyword\">Info</span>.plist</code>中添加<code><span class=\"hljs-attribute\">NSCameraUsageDescription</span></code>，相机权限说明</li><li>初始化ViewController，其中<ul><li>通用文字识别：<code><span class=\"hljs-built_in\">UIViewController</span> * vc = [AipGeneralVC ViewControllerWithDelegate:<span class=\"hljs-keyword\">self</span>]</code></li><li>银行卡识别 <code>UIViewController * vc = [AipCaptureCardVC <span class=\"hljs-string\">ViewControllerWithCardType:</span>CardTypeBankCard <span class=\"hljs-string\">andDelegate:</span>self]</code></li><li>身份证识别<ul><li>正面: <code>UIViewController * vc = [AipCaptureCardVC <span class=\"hljs-string\">ViewControllerWithCardType:</span>CardTypeIdCardFont <span class=\"hljs-string\">andDelegate:</span>self]</code></li><li>背面: <code>UIViewController * vc = [AipCaptureCardVC <span class=\"hljs-string\">ViewControllerWithCardType:</span>CardTypeIdCardFont <span class=\"hljs-string\">andDelegate:</span>self]</code></li></ul></li></ul></li><li>在合适的地方启动ViewController: 如<code>[self <span class=\"hljs-string\">presentViewController:</span>vc <span class=\"hljs-string\">animated:</span>YES <span class=\"hljs-string\">completion:</span>nil]</code></li></ol><p>AipOcrSdk.framework，即AipOcr工程包含了相机相关操作代码，如开发者想直接使用，无需引用AipOcrSdk工程，直接引入AipOcrSdk.framework即可。若需要修改相机操作相关UI，可引入AipOcrSdk工程，编辑相关UI代码即可。 ​<br>​</p><h2 id=\"4ea7a8d5\">数据接口</h2><p>该调用方法传入需要识别的UIImage，异步识别，识别完成之后，回调返回识别结果。</p><p>主要类为AipOcrService类，使用单例<code>[AipOcrService sharedService]</code>来调用相关接口即可。</p><p>操作步骤：</p><ol><li>身份验证：调用 <code><span class=\"hljs-selector-attr\">[[AipOcrService shardService]</span> <span class=\"hljs-selector-tag\">authWithAK</span><span class=\"hljs-selector-pseudo\">:SK</span></code> 或其他验证方法；</li><li>调用以下相应接口<ul><li>通用文字识别 <code><span class=\"hljs-attribute\">detectTextFromImage</span></code></li><li>身份证正面<code><span class=\"hljs-attribute\">detectIdCardFrontFromImage</span></code></li><li>身份证背面<code><span class=\"hljs-attribute\">detectIdCardBackFromImage</span></code></li><li>银行卡<code><span class=\"hljs-attribute\">detectBankCardFromImage</span></code></li></ul></li></ol><p><strong>所有回调函数均在后台线程中被调用，如需在主线程中操作，请使用<code>[[NSOperationQueue mainQueue] addOperationWithBlock]</code>patch到主线程中，示例参考demo工程。</strong></p><h3>通用文字识别</h3><ul><li>调用示例</li></ul><pre>\n<code class=\"hljs\" lang=\"\">NSDictionary *options = @{@<span class=\"hljs-string\">\"language_type\"</span>: @<span class=\"hljs-string\">\"CHN_ENG\"</span>, @<span class=\"hljs-string\">\"detect_direction\"</span>: @<span class=\"hljs-string\">\"true\"</span>};\n[[AipOcrService shardService] <span class=\"hljs-string\">detectTextFromImage:</span>finalImage <span class=\"hljs-string\">withOptions:</span>options <span class=\"hljs-string\">successHandler:</span>^(id result) {\n    <span class=\"hljs-comment\">// 成功识别的后续逻辑</span>\n} <span class=\"hljs-string\">failHandler:</span>^(NSError *err) {\n    <span class=\"hljs-comment\">// 失败的后续逻辑</span>\n}];</code>\n</pre><p><strong>options参数详情</strong></p><table><thead><tr><th>参数</th><th>是否必选</th><th>类型</th><th>可选值范围</th><th>说明</th></tr></thead><tbody><tr><td>image（已由参数替代）</td><td>true</td><td>string</td><td>-</td><td>图像数据，base64编码，要求base64编码后大小不超过1M，最短边至少15px，最长边最大2048px,支持jpg/png/bmp格式</td></tr><tr><td>recognize_granularity</td><td>false</td><td>string</td><td>big、small</td><td>是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置</td></tr><tr><td>mask</td><td>false</td><td>string</td><td>-</td><td>表示mask区域的黑白灰度图片，白色代表选中, base64编码</td></tr><tr><td>language_type</td><td>false</td><td>string</td><td>CHN_ENG、ENG、POR、FRE、GER、ITA、SPA、RUS、JAP</td><td>识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语</td></tr><tr><td>detect_direction</td><td>false</td><td>boolean</td><td>true、false</td><td>是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。</td></tr><tr><td>detect_language</td><td>false</td><td>string</td><td>true、false</td><td>是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）</td></tr><tr><td>classify_dimension</td><td>false</td><td>string</td><td>lottery</td><td>分类维度（根据OCR结果进行分类），逗号分隔，当前只支持lottery。<br>lottery：彩票分类，设置detect_direction有助于提升精度</td></tr><tr><td>vertexes_location</td><td>false</td><td>string</td><td>true、false</td><td>是否返回文字外接多边形顶点位置，不支持单字位置。默认为false</td></tr></tbody></table><ul><li>结果返回</li></ul><table><thead><tr><th>字段</th><th>必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>direction</td><td>否</td><td>int32</td><td>图像方向，当detect_direction=true时存在。<br>- -1:未定义，<br>- 0:正向，<br>- 1: 逆时针90度，<br>- 2:逆时针180度，<br>- 3:逆时针270度</td></tr><tr><td>log_id</td><td>是</td><td>uint64</td><td>唯一的log id，用于问题定位</td></tr><tr><td>words_result</td><td>是</td><td>array()</td><td>定位和识别结果数组</td></tr><tr><td>words_result_num</td><td>是</td><td>uint32</td><td>识别结果数，表示words_result的元素个数</td></tr><tr><td>+vertexes_location</td><td>否</td><td>array()</td><td>当前为四个顶点: 左上，右上，右下，左下。当vertexes_location=true时存在</td></tr><tr><td>++x</td><td>是</td><td>uint32</td><td>水平坐标（坐标0点为左上角）</td></tr><tr><td>++y</td><td>是</td><td>uint32</td><td>垂直坐标（坐标0点为左上角）</td></tr><tr><td>+location</td><td>是</td><td>array()</td><td>位置数组（坐标0点为左上角）</td></tr><tr><td>++left</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td>++top</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td>++width</td><td>是</td><td>uint32</td><td>表示定位位置的长方形的宽度</td></tr><tr><td>++height</td><td>是</td><td>uint32</td><td>表示定位位置的长方形的高度</td></tr><tr><td>+words</td><td>否</td><td>string</td><td>识别结果字符串</td></tr><tr><td>+chars</td><td>否</td><td>array()</td><td>单字符结果，recognize_granularity=small时存在</td></tr><tr><td>++location</td><td>是</td><td>array()</td><td>位置数组（坐标0点为左上角）</td></tr><tr><td>+++left</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td>+++top</td><td>是</td><td>uint32</td><td>表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td>+++width</td><td>是</td><td>uint32</td><td>表示定位定位位置的长方形的宽度</td></tr><tr><td>+++height</td><td>是</td><td>uint32</td><td>表示位置的长方形的高度</td></tr><tr><td>++char</td><td>是</td><td>string</td><td>单字符识别结果</td></tr></tbody></table><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 示例</span>\n{    \n    <span class=\"hljs-string\">direction :</span> <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-string\">log_id :</span> <span class=\"hljs-number\">676709620</span>,\n    <span class=\"hljs-string\">words_result :</span> [ {\n            <span class=\"hljs-string\">location :</span> {\n                <span class=\"hljs-string\">height :</span> <span class=\"hljs-number\">20</span>;\n                <span class=\"hljs-string\">left :</span> <span class=\"hljs-number\">86</span>;\n                <span class=\"hljs-string\">top :</span> <span class=\"hljs-number\">387</span>;\n                <span class=\"hljs-string\">width :</span> <span class=\"hljs-number\">22</span>;\n            };\n            <span class=\"hljs-string\">words :</span> <span class=\"hljs-string\">\"N\"</span>;\n        },\n    ],\n    <span class=\"hljs-string\">words_result_num :</span> <span class=\"hljs-number\">1</span>;\n}</code>\n</pre><h3>银行卡识别</h3><ul><li>调用示例</li></ul><pre>\n<code class=\"hljs\" lang=\"\">[[AipOcrService shardService] detectBankCardFromImage:finalImage successHandler:^(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">id</span></span> result) {\n    //成功\n} failHandler:^(<span class=\"hljs-name\">NSError</span> *err) {\n    //失败\n}]<span class=\"hljs-comment\">;</span></code>\n</pre><ul><li>结果返回</li></ul><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th></tr></thead><tbody><tr><td style=\"text-align:left\">log_id</td><td style=\"text-align:left\">Uint64</td><td style=\"text-align:left\">唯一的log id，用于问题定位</td></tr><tr><td style=\"text-align:left\">result</td><td style=\"text-align:left\">Object</td><td style=\"text-align:left\">定位和识别结果数组</td></tr><tr><td style=\"text-align:left\">+bank_card_number</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">银行卡识别结果</td></tr><tr><td style=\"text-align:left\">+bank_name</td><td style=\"text-align:left\">string</td><td style=\"text-align:left\">银行名，不能识别时为空</td></tr><tr><td style=\"text-align:left\">+bank_card_type</td><td style=\"text-align:left\">uint32</td><td style=\"text-align:left\">银行卡类型，0:不能识别; 1: 借记卡; 2: 信用卡</td></tr></tbody></table><pre>\n<code class=\"hljs\" lang=\"\"> // 示例\n {\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">2742598501</span>;\n    <span class=\"hljs-string\">\"result\"</span>: {\n        <span class=\"hljs-string\">\"bank_card_number\"</span>: <span class=\"hljs-string\">\"622202 0200046230377\"</span>;\n        <span class=\"hljs-string\">\"bank_card_type\"</span>: <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-string\">\"bank_name\"</span>: <span class=\"hljs-string\">\"\\U5de5\\U5546\\U94f6\\U884c\"</span>;\n    };\n}</code>\n</pre><h3>身份证识别</h3><ul><li>调用示例</li></ul><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">// 正面</span>\n<span class=\"hljs-selector-attr\">[[AipOcrService shardService]</span> <span class=\"hljs-selector-tag\">detectIdCardFrontFromImage</span><span class=\"hljs-selector-pseudo\">:finalImage</span> <span class=\"hljs-selector-tag\">withOptions</span><span class=\"hljs-selector-pseudo\">:nil</span> <span class=\"hljs-selector-tag\">successHandler</span>:^(id result) {\n   <span class=\"hljs-comment\">// 成功</span>\n} <span class=\"hljs-attribute\">failHandler</span>:^(NSError *err) {\n   <span class=\"hljs-comment\">// 失败</span>\n}];</code>\n</pre><p><strong>options参数</strong></p><table><thead><tr><th>参数</th><th>必选</th><th>范围</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>image（已由image参数代替）</td><td>true</td><td></td><td>String</td><td>图像数据，支持本地图像文件路径，图像文件二进制数据，要求base64编码后大小不超过1M，最短边至少15px，最长边最大2048px,支持jpg/png/bmp格式</td></tr><tr><td>isFront（已由函数名区分）</td><td>true</td><td>true、false</td><td>Boolean</td><td>true：身份证正面，false：身份证背面</td></tr><tr><td>detect_direction</td><td>false</td><td>true、false</td><td>string</td><td>是否检测图像朝向，默认不检测，即：false。可选值为：true - 检测图像朝向；false - 不检测图像朝向。朝向是指输入图像是正常方向、逆时针旋转90/180/270度</td></tr><tr><td>accuracy</td><td>false</td><td>auto、normal、high</td><td>string</td><td>精准度，精度越高，速度越慢。default：auto</td></tr></tbody></table><ul><li>结果</li></ul><table><thead><tr><th style=\"text-align:left\">参数</th><th style=\"text-align:left\">类型</th><th style=\"text-align:left\">描述</th></tr></thead><tbody><tr><td style=\"text-align:left\">direction</td><td style=\"text-align:left\">Int32</td><td style=\"text-align:left\">图像方向，当detect_direction=true时存在。-1:未定义，0:正向，1: 逆时针90度， 2:逆时针180度， 3:逆时针270度</td></tr><tr><td style=\"text-align:left\">log_id</td><td style=\"text-align:left\">Uint64</td><td style=\"text-align:left\">唯一的log id，用于问题定位</td></tr><tr><td style=\"text-align:left\">words_result</td><td style=\"text-align:left\">Array</td><td style=\"text-align:left\">定位和识别结果数组，数组元素的key是身份证的主体字段（正面支持：住址、公民身份号码、出生、姓名、性别、民族，背面支持：签发日期、失效日期、签发机关）。只返回识别出的字段。若身份证号码校验不通过，则不返回</td></tr><tr><td style=\"text-align:left\">words_result_num</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">识别结果数，表示words_result的元素个数</td></tr><tr><td style=\"text-align:left\">+location</td><td style=\"text-align:left\">Array</td><td style=\"text-align:left\">位置数组（坐标0点为左上角）</td></tr><tr><td style=\"text-align:left\">++left</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形左上顶点的水平坐标</td></tr><tr><td style=\"text-align:left\">++top</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形左上顶点的垂直坐标</td></tr><tr><td style=\"text-align:left\">++width</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形的宽度</td></tr><tr><td style=\"text-align:left\">++height</td><td style=\"text-align:left\">Uint32</td><td style=\"text-align:left\">表示定位位置的长方形的高度</td></tr><tr><td style=\"text-align:left\">+words</td><td style=\"text-align:left\">String</td><td style=\"text-align:left\">识别结果字符串</td></tr></tbody></table><pre>\n<code class=\"hljs\" lang=\"\">//示例\n{\n    <span class=\"hljs-string\">\"log_id\"</span>: <span class=\"hljs-number\">7037721</span>,\n    <span class=\"hljs-string\">\"direction\"</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-string\">\"words_result_num\"</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-string\">\"words_result\"</span>: {\n        <span class=\"hljs-string\">\"住址\"</span>: {\n            <span class=\"hljs-string\">\"location\"</span>: {\n                <span class=\"hljs-string\">\"left\"</span>: <span class=\"hljs-number\">227</span>,\n                <span class=\"hljs-string\">\"top\"</span>: <span class=\"hljs-number\">235</span>,\n                <span class=\"hljs-string\">\"width\"</span>: <span class=\"hljs-number\">229</span>,\n                <span class=\"hljs-string\">\"height\"</span>: <span class=\"hljs-number\">51</span>\n            },\n            <span class=\"hljs-string\">\"words\"</span>: <span class=\"hljs-string\">\"湖北省天门市渔薪镇杨咀村一组2号\"</span>,\n        }\n        ...\n    }\n}</code>\n</pre><h2 id=\"4828c68c\">特殊配置</h2><h3>截图分辨率系数</h3><p>该系数影响到拍摄照片之后截取的图片大小</p><p>在AipOcrSdk/AipOcrSdk/View/AipCutImageView.m 中</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">//截图的分辨率系数 开发者可自行配置</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">CGFloat</span> <span class=\"hljs-keyword\">const</span> scale = <span class=\"hljs-number\">1.0</span>;</code>\n</pre><h3>图片放大/缩小系数</h3><p>在AipOcrSdk/AipOcrSdk/View/AipCutImageView.m 中</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">//捏合操作最大/最小系数</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">CGFloat</span> <span class=\"hljs-keyword\">const</span> pinchMaxscale = <span class=\"hljs-number\">10.0</span>;\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">CGFloat</span> <span class=\"hljs-keyword\">const</span> pinchMinscale = <span class=\"hljs-number\">0.5</span>;</code>\n</pre><h3>自动重试</h3><p>识别失败后，自动重试一次。</p><p>在AipOcrSdk/AipOcrSdk/AipOcrService 中，配置属性 retry即可 ​</p><pre>\n<code class=\"hljs\" lang=\"\"><span class=\"hljs-comment\">/**\n * 是否重试。默认为NO。YES会在失败时自动重试一次。\n */</span>\n<span class=\"hljs-keyword\">@property</span> (atomic, <span class=\"hljs-keyword\">assign</span>) <span class=\"hljs-keyword\">bool</span> retry;</code>\n</pre><h1 id=\"a084d0b5\">错误码表</h1><p><strong>验证错误</strong></p><table><thead><tr><th>错误码</th><th>错误信息</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>110</td><td>Access token invalid or no longer valid</td><td>Access Token过期失效</td><td>请重新获得有效的Token</td></tr><tr><td>283501</td><td>License file check error</td><td>授权文件不匹配</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置正确的包名，并确认使用了正确的授权文件</td></tr><tr><td>283502</td><td>App identifier unmatch</td><td>BundleId不匹配</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置正确的包名，并确认使用了正确的授权文件</td></tr><tr><td>283504</td><td>Network error</td><td>网络请求失败</td><td>请授权App网络权限并保证网络通畅</td></tr><tr><td>283505</td><td>Server illegal response</td><td>服务器返回数据异常</td><td></td></tr><tr><td>283601</td><td>Server authentication error</td><td>身份验证错误。</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置应用，并确认填写了正确的AK/SK，或使用了正确的授权文件</td></tr><tr><td>283602</td><td>Authentication time error</td><td>时间戳不正确，可能是设备时间异常。</td><td></td></tr><tr><td>283604</td><td>App identifier unmatch</td><td>错误的PackageName或者BundleId</td><td>请在<a href=\"https://console.bce.baidu.com/ai/#/ai/ocr/overview/index\" target=\"_blank\">控制台</a>中配置正确的包名，并确认使用了正确的授权文件</td></tr><tr><td>283700</td><td>Server internal error</td><td>服务器内部错误</td><td>您可以在工单系统中提交错误信息中的logId，我们将尝试帮您排查原因</td></tr></tbody></table><p><strong>服务错误</strong></p><table><thead><tr><th>错误码</th><th>错误信息</th><th>描述</th></tr></thead><tbody><tr><td>216015</td><td>module closed</td><td>模块关闭</td></tr><tr><td>216100</td><td>invalid param</td><td>非法参数</td></tr><tr><td>216101</td><td>not enough param</td><td>参数数量不够</td></tr><tr><td>216102</td><td>service not support</td><td>业务不支持</td></tr><tr><td>216103</td><td>param too long</td><td>参数太长</td></tr><tr><td>216110</td><td>appid not exist</td><td>APP ID不存在</td></tr><tr><td>216111</td><td>invalid userid</td><td>非法用户ID</td></tr><tr><td>216200</td><td>empty image</td><td>空的图片</td></tr><tr><td>216201</td><td>image format error</td><td>图片格式错误</td></tr><tr><td>216202</td><td>image size error</td><td>图片大小错误</td></tr><tr><td>216300</td><td>db error</td><td>DB错误</td></tr><tr><td>216400</td><td>backend error</td><td>后端系统错误</td></tr><tr><td>216401</td><td>internal error</td><td>内部错误</td></tr><tr><td>216500</td><td>unknown error</td><td>未知错误</td></tr><tr><td>216600</td><td>id number format error</td><td>身份证的ID格式错误</td></tr><tr><td>216601</td><td>id number and name not match</td><td>身份证的ID和名字不匹配</td></tr><tr><td>216630</td><td>recognize error</td><td>识别错误</td></tr><tr><td>216631</td><td>recognize bank card error</td><td>识别银行卡错误（通常为检测不到银行卡）</td></tr><tr><td>216632</td><td>ocr</td><td>unknown error</td></tr><tr><td>216633</td><td>recognize idcard error</td><td>识别身份证错误（通常为检测不到身份证）</td></tr><tr><td>216634</td><td>detect error</td><td>检测错误</td></tr><tr><td>216635</td><td>get mask error</td><td>获取mask图片错误</td></tr><tr><td>282000</td><td>logic internal error</td><td>业务逻辑层内部错误</td></tr><tr><td>282001</td><td>logic backend error</td><td>业务逻辑层后端服务错误</td></tr><tr><td>282002</td><td>input encoding error</td><td>请求参数编码错误</td></tr><tr><td>282100</td><td>image transcode error</td><td>图片压缩转码错误</td></tr></tbody></table><h1 id=\"6474c851\">版本更新记录</h1><table><thead><tr><th>上线日期</th><th>版本号</th><th>更新内容</th></tr></thead><tbody><tr><td>2017.3.16</td><td>1.0.0</td><td>在线OCR第一版！</td></tr></tbody></table>",
  "headings": [
    {
      "level": 1,
      "text": "OCR iOS SDK 开发者文档",
      "id": "25de006b"
    },
    {
      "level": 1,
      "text": "快速入门",
      "id": "54f1e662"
    },
    {
      "level": 2,
      "text": "SDK工程结构",
      "id": "00d7eaf1"
    },
    {
      "level": 2,
      "text": "Demo工程",
      "id": "eb925662"
    },
    {
      "level": 2,
      "text": "身份验证与安全",
      "id": "bd47d80a"
    },
    {
      "level": 1,
      "text": "SDK集成与接口调用",
      "id": "e9262c91"
    },
    {
      "level": 2,
      "text": "相机接口",
      "id": "903974e4"
    },
    {
      "level": 2,
      "text": "数据接口",
      "id": "4ea7a8d5"
    },
    {
      "level": 2,
      "text": "特殊配置",
      "id": "4828c68c"
    },
    {
      "level": 1,
      "text": "错误码表",
      "id": "a084d0b5"
    },
    {
      "level": 1,
      "text": "版本更新记录",
      "id": "6474c851"
    }
  ]
}
